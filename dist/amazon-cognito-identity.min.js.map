{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-identity.min.js","webpack:///webpack/bootstrap 97bad3fe0438b02f499f","webpack:///./enhance.js","webpack:///external \"sjcl\"","webpack:///./src/AuthenticationHelper.js","webpack:///./src/CognitoAccessToken.js","webpack:///./src/CognitoIdToken.js","webpack:///./src/CognitoRefreshToken.js","webpack:///./src/CognitoUser.js","webpack:///./src/CognitoUserAttribute.js","webpack:///./src/CognitoUserSession.js","webpack:///./src/DateHelper.js","webpack:///./src/StorageHelper.js","webpack:///external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}","webpack:///external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}","webpack:///./src/AuthenticationDetails.js","webpack:///./src/CognitoUserPool.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_11__","__WEBPACK_EXTERNAL_MODULE_12__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_interopRequireDefault","defineProperty","value","_src","keys","forEach","enumerable","get","_cognitoidentityserviceprovider","_cognitoidentityserviceprovider2","enhancements","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","_sjcl","sjcl","_jsbn","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","paranoia","N","BigInteger","g","k","hexHash","toString","smallAValue","generateRandomSmallA","largeAValue","calculateA","infoBits","codec","utf8String","toBits","poolName","words","random","randomWords","hexRandom","hex","fromBits","randomBigInt","smallABigInt","mod","stringRandom","base64","randomPassword","SaltToHashDevices","verifierDevices","deviceGroupKey","username","generateRandomString","combinedString","hashedString","hash","saltDevices","firstCharSalt","indexOf","verifierDevicesNotPadded","modPow","firstCharVerifierDevices","a","A","Error","B","firstCharA","firstCharB","AToHash","BToHash","UHexHash","finalU","bitArray","hashHex","sha256","Array","join","hexStr","ikm","salt","mac","misc","hmac","update","prk","digest","infoBitsUpdate","concat","String","fromCharCode","clamp","password","serverBValue","equals","UValue","calculateU","usernamePassword","usernamePasswordHash","SaltToHash","xValue","gModPowXN","intValue2","subtract","multiply","sValue","add","SToHash","firstCharS","UValueToHash","firstCharU","hkdf","computehkdf","CognitoAccessToken","_ref","arguments","undefined","AccessToken","jwtToken","payload","split","expiration","JSON","parse","base64url","exp","CognitoIdToken","IdToken","CognitoRefreshToken","RefreshToken","token","_AuthenticationHelper","_AuthenticationHelper2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","_CognitoUserSession","_CognitoUserSession2","_DateHelper","_DateHelper2","_CognitoUserAttribute","_CognitoUserAttribute2","_StorageHelper","_StorageHelper2","CognitoUser","data","Username","Pool","pool","Session","client","signInUserSession","authenticationFlowType","authDetails","callback","_this","authenticationHelper","getUserPoolId","getParanoia","dateHelper","authParameters","deviceKey","DEVICE_KEY","USERNAME","SRP_A","getLargeAValue","CHALLENGE_NAME","makeUnauthenticatedRequest","AuthFlow","ClientId","getClientId","AuthParameters","ClientMetadata","getValidationData","err","onFailure","challengeParameters","ChallengeParameters","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","secretBlockBits","SECRET_BLOCK","dateNow","getNowString","signature","signatureString","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","message","toLowerCase","clearCachedDeviceKeyAndPassword","ChallengeName","ChallengeResponses","errAuthenticate","dataAuthenticate","challengeName","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","substr","newPasswordRequired","authenticateUserInternal","_this2","mfaRequired","customChallenge","getDeviceResponse","getCognitoUserSession","AuthenticationResult","cacheTokens","newDeviceMetadata","NewDeviceMetadata","onSuccess","generateHashDevice","DeviceGroupKey","DeviceKey","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","newPassword","requiredAttributeData","_this3","finalUserAttributes","NEW_PASSWORD","_this4","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","answerChallenge","_this5","ANSWER","_this6","SMS_MFA_CODE","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","_this7","clearCachedTokens","attributes","UserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","UserAttributeNames","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","storage","getStorage","getItem","idToken","accessToken","refreshToken","sessionData","cachedSession","getToken","refreshSession","_this8","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authResult","authenticationResult","setItem","getIdToken","getRefreshToken","randomPasswordKey","deviceGroupKeyKey","removeItem","inputVerificationCode","Password","attributeName","Code","_this9","forgetSpecificDevice","result","DeviceRememberedStatus","limit","paginationToken","Limit","PaginationToken","_this10","CognitoUserAttribute","name","stringify","CognitoUserSession","now","Math","floor","Date","getExpiration","monthNames","weekNames","DateHelper","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","dataMemory","storageWindow","window","localStorage","MemoryStorage","console","log","StorageHelper","exception","AuthenticationDetails","ValidationData","validationData","_CognitoUser","_CognitoUser2","CognitoUserPool","UserPoolId","Paranoia","test","region","userPoolId","clientId","apiVersion","cognitoUser","returnData","user","userConfirmed","UserConfirmed","lastAuthUser","_AuthenticationDetails","_CognitoUserPool"],"mappings":"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","file":"amazon-cognito-identity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _src = __webpack_require__(15);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(11);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tObject.keys(enhancements).forEach(function (key) {\n\t  _cognitoidentityserviceprovider2.default[key] = enhancements[key];\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\n\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(12);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\t\n\tvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\t\n\t/** @class */\n\t\n\tvar AuthenticationHelper = function () {\n\t  /**\n\t   * Constructs a new AuthenticationHelper object\n\t   * @param {string} PoolName Cognito user pool name.\n\t   * @param {int} paranoia Random number generation paranoia level.\n\t   */\n\t  function AuthenticationHelper(PoolName, paranoia) {\n\t    _classCallCheck(this, AuthenticationHelper);\n\t\n\t    this.N = new _jsbn.BigInteger(initN, 16);\n\t    this.g = new _jsbn.BigInteger('2');\n\t    this.k = new _jsbn.BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\t\n\t    this.paranoia = paranoia;\n\t\n\t    this.smallAValue = this.generateRandomSmallA();\n\t    this.largeAValue = this.calculateA(this.smallAValue);\n\t\n\t    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\n\t\n\t    this.poolName = PoolName;\n\t  }\n\t\n\t  /**\n\t   * @returns {BigInteger} small A, a random number\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationHelper, [{\n\t    key: 'getSmallAValue',\n\t    value: function getSmallAValue() {\n\t      return this.smallAValue;\n\t    }\n\t\n\t    /**\n\t     * @returns {BigInteger} large A, a value generated from small A\n\t     */\n\t\n\t  }, {\n\t    key: 'getLargeAValue',\n\t    value: function getLargeAValue() {\n\t      return this.largeAValue;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random big integer\n\t     * @returns {BigInteger} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomSmallA',\n\t    value: function generateRandomSmallA() {\n\t      var words = sjcl.random.randomWords(32, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t\n\t      var randomBigInt = new _jsbn.BigInteger(hexRandom, 16);\n\t      var smallABigInt = randomBigInt.mod(this.N);\n\t\n\t      return smallABigInt;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random string\n\t     * @returns {string} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomString',\n\t    value: function generateRandomString() {\n\t      var words = sjcl.random.randomWords(10, this.paranoia);\n\t      var stringRandom = sjcl.codec.base64.fromBits(words);\n\t\n\t      return stringRandom;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in password hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getRandomPassword',\n\t    value: function getRandomPassword() {\n\t      return this.randomPassword;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in devices hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getSaltDevices',\n\t    value: function getSaltDevices() {\n\t      return this.SaltToHashDevices;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Value used to verify devices.\n\t     */\n\t\n\t  }, {\n\t    key: 'getVerifierDevices',\n\t    value: function getVerifierDevices() {\n\t      return this.verifierDevices;\n\t    }\n\t\n\t    /**\n\t     * Generate salts and compute verifier.\n\t     * @param {string} deviceGroupKey Devices to generate verifier for.\n\t     * @param {string} username User to generate verifier for.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'generateHashDevice',\n\t    value: function generateHashDevice(deviceGroupKey, username) {\n\t      this.randomPassword = this.generateRandomString();\n\t      var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n\t      var hashedString = this.hash(combinedString);\n\t\n\t      var words = sjcl.random.randomWords(4, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t      var saltDevices = new _jsbn.BigInteger(hexRandom, 16);\n\t      var firstCharSalt = saltDevices.toString(16)[0];\n\t      this.SaltToHashDevices = saltDevices.toString(16);\n\t\n\t      if (saltDevices.toString(16).length % 2 === 1) {\n\t        this.SaltToHashDevices = '0' + this.SaltToHashDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        this.SaltToHashDevices = '00' + this.SaltToHashDevices;\n\t      }\n\t      var verifierDevicesNotPadded = this.g.modPow(new _jsbn.BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N);\n\t\n\t      var firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\n\t      this.verifierDevices = verifierDevicesNotPadded.toString(16);\n\t\n\t      if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\n\t        this.verifierDevices = '0' + this.verifierDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\n\t        this.verifierDevices = '00' + this.verifierDevices;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's public value A = g^a%N\n\t     * with the generated random number a\n\t     * @param {BigInteger} a Randomly generated small A.\n\t     * @returns {BigInteger} Computed large A.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateA',\n\t    value: function calculateA(a) {\n\t      var A = this.g.modPow(a, this.N);\n\t\n\t      if (A.mod(this.N).toString() === '0') {\n\t        throw new Error('Illegal paramater. A mod N cannot be 0.');\n\t      }\n\t      return A;\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's value U which is the hash of A and B\n\t     * @param {BigInteger} A Large A value.\n\t     * @param {BigInteger} B Server B value.\n\t     * @returns {BigInteger} Computed U value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateU',\n\t    value: function calculateU(A, B) {\n\t      var firstCharA = A.toString(16)[0];\n\t      var firstCharB = B.toString(16)[0];\n\t      var AToHash = A.toString(16);\n\t      var BToHash = B.toString(16);\n\t\n\t      if (A.toString(16).length % 2 === 1) {\n\t        AToHash = '0' + AToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\n\t        AToHash = '00' + AToHash;\n\t      }\n\t\n\t      if (B.toString(16).length % 2 === 1) {\n\t        BToHash = '0' + BToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\n\t        BToHash = '00' + BToHash;\n\t      }\n\t\n\t      this.UHexHash = this.hexHash(AToHash + BToHash);\n\t      var finalU = new _jsbn.BigInteger(this.UHexHash, 16);\n\t\n\t      return finalU;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a bitArray\n\t     * @param {sjcl.bitArray} bitArray Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hash',\n\t    value: function hash(bitArray) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a hex string\n\t     * @param {String} hexStr Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hexHash',\n\t    value: function hexHash(hexStr) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\n\t     * Standard hkdf algorithm\n\t     * @param {sjcl.bitArray} ikm Input key material.\n\t     * @param {sjcl.bitArray} salt Salt value.\n\t     * @returns {sjcl.bitArray} Strong key material.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'computehkdf',\n\t    value: function computehkdf(ikm, salt) {\n\t      var mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\n\t      mac.update(ikm);\n\t      var prk = mac.digest();\n\t      var hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\n\t      var infoBitsUpdate = sjcl.bitArray.concat(this.infoBits, sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\n\t      hmac.update(infoBitsUpdate);\n\t\n\t      return sjcl.bitArray.clamp(hmac.digest(), 128);\n\t    }\n\t\n\t    /**\n\t     * Calculates the final hkdf based on computed S value, and computed U value and the key\n\t     * @param {String} username Username.\n\t     * @param {String} password Password.\n\t     * @param {BigInteger} serverBValue Server B value.\n\t     * @param {BigInteger} salt Generated salt.\n\t     * @returns {sjcl.bitArray} Computed HKDF value.\n\t     */\n\t\n\t  }, {\n\t    key: 'getPasswordAuthenticationKey',\n\t    value: function getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n\t      if (serverBValue.mod(this.N).equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('B cannot be zero.');\n\t      }\n\t\n\t      this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\t\n\t      if (this.UValue.equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('U cannot be zero.');\n\t      }\n\t\n\t      var usernamePassword = '' + this.poolName + username + ':' + password;\n\t      var usernamePasswordHash = this.hash(usernamePassword);\n\t\n\t      var firstCharSalt = salt.toString(16)[0];\n\t      var SaltToHash = salt.toString(16);\n\t\n\t      if (salt.toString(16).length % 2 === 1) {\n\t        SaltToHash = '0' + SaltToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        SaltToHash = '00' + SaltToHash;\n\t      }\n\t\n\t      var xValue = new _jsbn.BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\n\t\n\t      var gModPowXN = this.g.modPow(xValue, this.N);\n\t      var intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n\t      var sValue = intValue2.modPow(this.smallAValue.add(this.UValue.multiply(xValue)), this.N).mod(this.N);\n\t\n\t      var SToHash = sValue.toString(16);\n\t      var firstCharS = sValue.toString(16)[0];\n\t\n\t      if (sValue.toString(16).length % 2 === 1) {\n\t        SToHash = '0' + SToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\n\t        SToHash = '00' + SToHash;\n\t      }\n\t\n\t      var UValueToHash = this.UHexHash;\n\t      var firstCharU = this.UHexHash[0];\n\t\n\t      if (this.UHexHash.length % 2 === 1) {\n\t        UValueToHash = '0' + UValueToHash;\n\t      } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\n\t        UValueToHash = '00' + UValueToHash;\n\t      }\n\t\n\t      var hkdf = this.computehkdf(sjcl.codec.hex.toBits(SToHash), sjcl.codec.hex.toBits(UValueToHash));\n\t\n\t      return hkdf;\n\t    }\n\t\n\t    /**\n\t    * Return constant newPasswordRequiredChallengeUserAttributePrefix\n\t    * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n\t    */\n\t\n\t  }, {\n\t    key: 'getNewPasswordRequiredChallengeUserAttributePrefix',\n\t    value: function getNewPasswordRequiredChallengeUserAttributePrefix() {\n\t      return newPasswordRequiredChallengeUserAttributePrefix;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationHelper;\n\t}();\n\t\n\texports.default = AuthenticationHelper;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * or in the \"license\" file accompanying this file. This file is\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\n\t   * Constructs a new CognitoAccessToken object\n\t   * @param {string=} AccessToken The JWT access token.\n\t   */\n\t  function CognitoAccessToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoAccessToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\n\t   * Constructs a new CognitoIdToken object\n\t   * @param {string=} IdToken The JWT Id token\n\t   */\n\t  function CognitoIdToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken;\n\t\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoIdToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\n\t   * Constructs a new CognitoRefreshToken object\n\t   * @param {string=} RefreshToken The JWT refresh token.\n\t   */\n\t  function CognitoRefreshToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        RefreshToken = _ref.RefreshToken;\n\t\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.token = RefreshToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoRefreshToken, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.token;\n\t    }\n\t  }]);\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(12);\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tvar _AuthenticationHelper2 = _interopRequireDefault(_AuthenticationHelper);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tvar _CognitoUserSession2 = _interopRequireDefault(_CognitoUserSession);\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tvar _DateHelper2 = _interopRequireDefault(_DateHelper);\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tvar _CognitoUserAttribute2 = _interopRequireDefault(_CognitoUserAttribute);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @callback nodeCallback\n\t * @template T result\n\t * @param {*} err The operation failure reason, or null.\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback onFailure\n\t * @param {*} err Failure reason.\n\t */\n\t\n\t/**\n\t * @callback onSuccess\n\t * @template T result\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback mfaRequired\n\t * @param {*} details MFA challenge details.\n\t */\n\t\n\t/**\n\t * @callback customChallenge\n\t * @param {*} details Custom challenge details.\n\t */\n\t\n\t/**\n\t * @callback inputVerificationCode\n\t * @param {*} data Server response.\n\t */\n\t\n\t/**\n\t * @callback authSuccess\n\t * @param {CognitoUserSession} session The new session.\n\t * @param {bool=} userConfirmationNecessary User must be confirmed.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUser = function () {\n\t  /**\n\t   * Constructs a new CognitoUser object\n\t   * @param {object} data Creation options\n\t   * @param {string} data.Username The user's username.\n\t   * @param {CognitoUserPool} data.Pool Pool containing the user.\n\t   */\n\t  function CognitoUser(data) {\n\t    _classCallCheck(this, CognitoUser);\n\t\n\t    if (data == null || data.Username == null || data.Pool == null) {\n\t      throw new Error('Username and pool information are required.');\n\t    }\n\t\n\t    this.username = data.Username || '';\n\t    this.pool = data.Pool;\n\t    this.Session = null;\n\t\n\t    this.client = data.Pool.client;\n\t\n\t    this.signInUserSession = null;\n\t    this.authenticationFlowType = 'USER_SRP_AUTH';\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoUserSession} the current session for this user\n\t   */\n\t\n\t\n\t  _createClass(CognitoUser, [{\n\t    key: 'getSignInUserSession',\n\t    value: function getSignInUserSession() {\n\t      return this.signInUserSession;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the user's username\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {String} the authentication flow type\n\t     */\n\t\n\t  }, {\n\t    key: 'getAuthenticationFlowType',\n\t    value: function getAuthenticationFlowType() {\n\t      return this.authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * sets authentication flow type\n\t     * @param {string} authenticationFlowType New value.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setAuthenticationFlowType',\n\t    value: function setAuthenticationFlowType(authenticationFlowType) {\n\t      this.authenticationFlowType = authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n\t     * stuff\n\t     * @param {AuthenticationDetails} authDetails Contains the authentication data\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {newPasswordRequired} callback.newPasswordRequired new\n\t     *        password and any required attributes are required to continue\n\t     * @param {mfaRequired} callback.mfaRequired MFA code\n\t     *        required to continue.\n\t     * @param {customChallenge} callback.customChallenge Custom challenge\n\t     *        response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'authenticateUser',\n\t    value: function authenticateUser(authDetails, callback) {\n\t      var _this = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var serverBValue = void 0;\n\t      var salt = void 0;\n\t      var authParameters = {};\n\t\n\t      if (this.deviceKey != null) {\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t        authParameters.CHALLENGE_NAME = 'SRP_A';\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        AuthFlow: this.authenticationFlowType,\n\t        ClientId: this.pool.getClientId(),\n\t        AuthParameters: authParameters,\n\t        ClientMetadata: authDetails.getValidationData()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        _this.username = challengeParameters.USER_ID_FOR_SRP;\n\t        serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t        _this.getCachedDeviceKeyAndPassword();\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this.username, authDetails.getPassword(), serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.pool.getUserPoolId().split('_')[1]));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.username));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\n\t        if (_this.deviceKey != null) {\n\t          challengeResponses.DEVICE_KEY = _this.deviceKey;\n\t        }\n\t\n\t        var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n\t          return _this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n\t            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n\t              challengeResponses.DEVICE_KEY = null;\n\t              _this.deviceKey = null;\n\t              _this.randomPassword = null;\n\t              _this.deviceGroupKey = null;\n\t              _this.clearCachedDeviceKeyAndPassword();\n\t              return respondToAuthChallenge(challenge, challengeCallback);\n\t            }\n\t            return challengeCallback(errChallenge, dataChallenge);\n\t          });\n\t        };\n\t\n\t        respondToAuthChallenge({\n\t          ChallengeName: 'PASSWORD_VERIFIER',\n\t          ClientId: _this.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          var challengeName = dataAuthenticate.ChallengeName;\n\t          if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            var userAttributes = null;\n\t            var rawRequiredAttributes = null;\n\t            var requiredAttributes = [];\n\t            var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t            if (dataAuthenticate.ChallengeParameters) {\n\t              userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n\t              rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n\t            }\n\t\n\t            if (rawRequiredAttributes) {\n\t              for (var i = 0; i < rawRequiredAttributes.length; i++) {\n\t                requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n\t              }\n\t            }\n\t            return callback.newPasswordRequired(userAttributes, requiredAttributes);\n\t          }\n\t          return _this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t    * PRIVATE ONLY: This is an internal only method and should not\n\t    * be directly called by the consumers.\n\t    * @param {object} dataAuthenticate authentication data\n\t    * @param {object} authenticationHelper helper created\n\t    * @param {callback} callback passed on from caller\n\t    * @returns {void}\n\t    */\n\t\n\t  }, {\n\t    key: 'authenticateUserInternal',\n\t    value: function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n\t      var _this2 = this;\n\t\n\t      var challengeName = dataAuthenticate.ChallengeName;\n\t      if (challengeName === 'SMS_MFA') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.mfaRequired(challengeName);\n\t      }\n\t\n\t      if (challengeName === 'CUSTOM_CHALLENGE') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.customChallenge(dataAuthenticate.ChallengeParameters);\n\t      }\n\t\n\t      if (challengeName === 'DEVICE_SRP_AUTH') {\n\t        this.getDeviceResponse(callback);\n\t        return undefined;\n\t      }\n\t\n\t      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t      this.cacheTokens();\n\t\n\t      var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t      if (newDeviceMetadata == null) {\n\t        return callback.onSuccess(this.signInUserSession);\n\t      }\n\t\n\t      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t      var deviceSecretVerifierConfig = {\n\t        Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t        PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t      };\n\t\n\t      this.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t      this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t      this.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t      this.client.makeUnauthenticatedRequest('confirmDevice', {\n\t        DeviceKey: newDeviceMetadata.DeviceKey,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t        DeviceName: navigator.userAgent\n\t      }, function (errConfirm, dataConfirm) {\n\t        if (errConfirm) {\n\t          return callback.onFailure(errConfirm);\n\t        }\n\t\n\t        _this2.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t        _this2.cacheDeviceKeyAndPassword();\n\t        if (dataConfirm.UserConfirmationNecessary === true) {\n\t          return callback.onSuccess(_this2.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t        }\n\t        return callback.onSuccess(_this2.signInUserSession);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t    * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n\t    * Pass the new password with any new user attributes to be updated.\n\t    * User attribute keys must be of format userAttributes.<attribute_name>.\n\t    * @param {string} newPassword new password for this user\n\t    * @param {object} requiredAttributeData map with values for all required attributes\n\t    * @param {object} callback Result callback map.\n\t    * @param {onFailure} callback.onFailure Called on any error.\n\t    * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n\t    * @param {customChallenge} callback.customChallenge Custom challenge\n\t    *         response required to continue.\n\t    * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t    * @returns {void}\n\t    */\n\t\n\t  }, {\n\t    key: 'completeNewPasswordChallenge',\n\t    value: function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n\t      var _this3 = this;\n\t\n\t      if (!newPassword) {\n\t        return callback.onFailure(new Error('New password is required.'));\n\t      }\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\n\t      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t      var finalUserAttributes = {};\n\t      if (requiredAttributeData) {\n\t        Object.keys(requiredAttributeData).forEach(function (key) {\n\t          finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n\t        });\n\t      }\n\t\n\t      finalUserAttributes.NEW_PASSWORD = newPassword;\n\t      finalUserAttributes.USERNAME = this.username;\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'NEW_PASSWORD_REQUIRED',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: finalUserAttributes,\n\t        Session: this.Session\n\t      }, function (errAuthenticate, dataAuthenticate) {\n\t        if (errAuthenticate) {\n\t          return callback.onFailure(errAuthenticate);\n\t        }\n\t        return _this3.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session using device authentication. It is called at the end of user\n\t     * authentication\n\t     *\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getDeviceResponse',\n\t    value: function getDeviceResponse(callback) {\n\t      var _this4 = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.deviceGroupKey, this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var authParameters = {};\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.DEVICE_KEY = this.deviceKey;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'DEVICE_SRP_AUTH',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: authParameters\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        var serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        var salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this4.deviceKey, _this4.randomPassword, serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this4.deviceGroupKey));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this4.deviceKey));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this4.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t        challengeResponses.DEVICE_KEY = _this4.deviceKey;\n\t\n\t        _this4.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t          ClientId: _this4.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          _this4.signInUserSession = _this4.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this4.cacheTokens();\n\t\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used for a certain user to confirm the registration by using a confirmation code\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmRegistration',\n\t    value: function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmSignUp', {\n\t        ClientId: this.pool.getClientId(),\n\t        ConfirmationCode: confirmationCode,\n\t        Username: this.username,\n\t        ForceAliasCreation: forceAliasCreation\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has the responses to a custom challenge\n\t     * @param {string} answerChallenge The custom challange answer.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {customChallenge} callback.customChallenge\n\t     *    Custom challenge response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendCustomChallengeAnswer',\n\t    value: function sendCustomChallengeAnswer(answerChallenge, callback) {\n\t      var _this5 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.ANSWER = answerChallenge;\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'CUSTOM_CHALLENGE',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = data.ChallengeName;\n\t\n\t        if (challengeName === 'CUSTOM_CHALLENGE') {\n\t          _this5.Session = data.Session;\n\t          return callback.customChallenge(data.challengeParameters);\n\t        }\n\t\n\t        _this5.signInUserSession = _this5.getCognitoUserSession(data.AuthenticationResult);\n\t        _this5.cacheTokens();\n\t        return callback.onSuccess(_this5.signInUserSession);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has an MFA code\n\t     * @param {string} confirmationCode The MFA code entered by the user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendMFACode',\n\t    value: function sendMFACode(confirmationCode, callback) {\n\t      var _this6 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\n\t      if (this.deviceKey != null) {\n\t        challengeResponses.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'SMS_MFA',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, dataAuthenticate) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = dataAuthenticate.ChallengeName;\n\t\n\t        if (challengeName === 'DEVICE_SRP_AUTH') {\n\t          _this6.getDeviceResponse(callback);\n\t          return undefined;\n\t        }\n\t\n\t        _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t        _this6.cacheTokens();\n\t\n\t        if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        }\n\t\n\t        var authenticationHelper = new _AuthenticationHelper2.default(_this6.pool.getUserPoolId().split('_')[1], _this6.pool.getParanoia());\n\t        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t        var deviceSecretVerifierConfig = {\n\t          Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t          PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t        };\n\t\n\t        _this6.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t        _this6.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t        _this6.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t        _this6.client.makeUnauthenticatedRequest('confirmDevice', {\n\t          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t          AccessToken: _this6.signInUserSession.getAccessToken().getJwtToken(),\n\t          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t          DeviceName: navigator.userAgent\n\t        }, function (errConfirm, dataConfirm) {\n\t          if (errConfirm) {\n\t            return callback.onFailure(errConfirm);\n\t          }\n\t\n\t          _this6.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t          _this6.cacheDeviceKeyAndPassword();\n\t          if (dataConfirm.UserConfirmationNecessary === true) {\n\t            return callback.onSuccess(_this6.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t          }\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to change the current password\n\t     * @param {string} oldUserPassword The current password.\n\t     * @param {string} newUserPassword The requested new password.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'changePassword',\n\t    value: function changePassword(oldUserPassword, newUserPassword, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('changePassword', {\n\t        PreviousPassword: oldUserPassword,\n\t        ProposedPassword: newUserPassword,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to enable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'enableMFA',\n\t    value: function enableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t      var mfaEnabled = {\n\t        DeliveryMedium: 'SMS',\n\t        AttributeName: 'phone_number'\n\t      };\n\t      mfaOptions.push(mfaEnabled);\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to disable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'disableMFA',\n\t    value: function disableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteUser',\n\t    value: function deleteUser(callback) {\n\t      var _this7 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        _this7.clearCachedTokens();\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n\t     */\n\t    /**\n\t     * This is used by an authenticated user to change a list of attributes\n\t     * @param {AttributeArg[]} attributes A list of the new user attributes.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'updateAttributes',\n\t    value: function updateAttributes(attributes, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        UserAttributes: attributes\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to get a list of attributes\n\t     * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserAttributes',\n\t    value: function getUserAttributes(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var attributeList = [];\n\t\n\t        for (var i = 0; i < userData.UserAttributes.length; i++) {\n\t          var attribute = {\n\t            Name: userData.UserAttributes[i].Name,\n\t            Value: userData.UserAttributes[i].Value\n\t          };\n\t          var userAttribute = new _CognitoUserAttribute2.default(attribute);\n\t          attributeList.push(userAttribute);\n\t        }\n\t\n\t        return callback(null, attributeList);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete a list of attributes\n\t     * @param {string[]} attributeList Names of the attributes to delete.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteAttributes',\n\t    value: function deleteAttributes(attributeList, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n\t        UserAttributeNames: attributeList,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by a user to resend a confirmation code\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'resendConfirmationCode',\n\t    value: function resendConfirmationCode(callback) {\n\t      this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session, either from the session object\n\t     * or from  the local storage, or by using a refresh token\n\t     *\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getSession',\n\t    value: function getSession(callback) {\n\t      if (this.username == null) {\n\t        return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t      }\n\t\n\t      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t        return callback(null, this.signInUserSession);\n\t      }\n\t\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var idTokenKey = keyPrefix + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.refreshToken';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(idTokenKey)) {\n\t        var idToken = new _CognitoIdToken2.default({\n\t          IdToken: storage.getItem(idTokenKey)\n\t        });\n\t        var accessToken = new _CognitoAccessToken2.default({\n\t          AccessToken: storage.getItem(accessTokenKey)\n\t        });\n\t        var refreshToken = new _CognitoRefreshToken2.default({\n\t          RefreshToken: storage.getItem(refreshTokenKey)\n\t        });\n\t\n\t        var sessionData = {\n\t          IdToken: idToken,\n\t          AccessToken: accessToken,\n\t          RefreshToken: refreshToken\n\t        };\n\t        var cachedSession = new _CognitoUserSession2.default(sessionData);\n\t        if (cachedSession.isValid()) {\n\t          this.signInUserSession = cachedSession;\n\t          return callback(null, this.signInUserSession);\n\t        }\n\t\n\t        if (refreshToken.getToken() == null) {\n\t          return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t        }\n\t\n\t        this.refreshSession(refreshToken, callback);\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This uses the refreshToken to retrieve a new session\n\t     * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'refreshSession',\n\t    value: function refreshSession(refreshToken, callback) {\n\t      var _this8 = this;\n\t\n\t      var authParameters = {};\n\t      authParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(lastUserKey)) {\n\t        this.username = storage.getItem(lastUserKey);\n\t        var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        ClientId: this.pool.getClientId(),\n\t        AuthFlow: 'REFRESH_TOKEN_AUTH',\n\t        AuthParameters: authParameters\n\t      }, function (err, authResult) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        if (authResult) {\n\t          var authenticationResult = authResult.AuthenticationResult;\n\t          if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t            authenticationResult.RefreshToken = refreshToken.getToken();\n\t          }\n\t          _this8.signInUserSession = _this8.getCognitoUserSession(authenticationResult);\n\t          _this8.cacheTokens();\n\t          return callback(null, _this8.signInUserSession);\n\t        }\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to save the session tokens to local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheTokens',\n\t    value: function cacheTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t      storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t      storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t      storage.setItem(lastUserKey, this.username);\n\t    }\n\t\n\t    /**\n\t     * This is used to cache the device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheDeviceKeyAndPassword',\n\t    value: function cacheDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.setItem(deviceKeyKey, this.deviceKey);\n\t      storage.setItem(randomPasswordKey, this.randomPassword);\n\t      storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to get current device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getCachedDeviceKeyAndPassword',\n\t    value: function getCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(deviceKeyKey)) {\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        this.randomPassword = storage.getItem(randomPasswordKey);\n\t        this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the device key info from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedDeviceKeyAndPassword',\n\t    value: function clearCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.removeItem(deviceKeyKey);\n\t      storage.removeItem(randomPasswordKey);\n\t      storage.removeItem(deviceGroupKeyKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the session tokens from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedTokens',\n\t    value: function clearCachedTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.removeItem(idTokenKey);\n\t      storage.removeItem(accessTokenKey);\n\t      storage.removeItem(refreshTokenKey);\n\t      storage.removeItem(lastUserKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to build a user session from tokens retrieved in the authentication result\n\t     * @param {object} authResult Successful auth response from server.\n\t     * @returns {CognitoUserSession} The new user session.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getCognitoUserSession',\n\t    value: function getCognitoUserSession(authResult) {\n\t      var idToken = new _CognitoIdToken2.default(authResult);\n\t      var accessToken = new _CognitoAccessToken2.default(authResult);\n\t      var refreshToken = new _CognitoRefreshToken2.default(authResult);\n\t\n\t      var sessionData = {\n\t        IdToken: idToken,\n\t        AccessToken: accessToken,\n\t        RefreshToken: refreshToken\n\t      };\n\t\n\t      return new _CognitoUserSession2.default(sessionData);\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate a forgot password request\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode?} callback.inputVerificationCode\n\t     *    Optional callback raised instead of onSuccess with response data.\n\t     * @param {onSuccess<void>?} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgotPassword',\n\t    value: function forgotPassword(callback) {\n\t      this.client.makeUnauthenticatedRequest('forgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        if (typeof callback.inputVerificationCode === 'function') {\n\t          return callback.inputVerificationCode(data);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm a new password using a confirmationCode\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {string} newPassword Confirm new password.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<void>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmPassword',\n\t    value: function confirmPassword(confirmationCode, newPassword, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username,\n\t        ConfirmationCode: confirmationCode,\n\t        Password: newPassword\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate an attribute confirmation request\n\t     * @param {string} attributeName User attribute that needs confirmation.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getAttributeVerificationCode',\n\t    value: function getAttributeVerificationCode(attributeName, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n\t        AttributeName: attributeName,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.inputVerificationCode(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm an attribute using a confirmation code\n\t     * @param {string} attributeName Attribute being confirmed.\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'verifyAttribute',\n\t    value: function verifyAttribute(attributeName, confirmationCode, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n\t        AttributeName: attributeName,\n\t        Code: confirmationCode,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to get the device information using the current device key\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getDevice',\n\t    value: function getDevice(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to forget a specific device\n\t     * @param {string} deviceKey Device key.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetSpecificDevice',\n\t    value: function forgetSpecificDevice(deviceKey, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('forgetDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: deviceKey\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to forget the current device\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetDevice',\n\t    value: function forgetDevice(callback) {\n\t      var _this9 = this;\n\t\n\t      this.forgetSpecificDevice(this.deviceKey, {\n\t        onFailure: callback.onFailure,\n\t        onSuccess: function onSuccess(result) {\n\t          _this9.deviceKey = null;\n\t          _this9.deviceGroupKey = null;\n\t          _this9.randomPassword = null;\n\t          _this9.clearCachedDeviceKeyAndPassword();\n\t          return callback.onSuccess(result);\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusRemembered',\n\t    value: function setDeviceStatusRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as not remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusNotRemembered',\n\t    value: function setDeviceStatusNotRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'not_remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to list all devices for a user\n\t     *\n\t     * @param {int} limit the number of devices returned in a call\n\t     * @param {string} paginationToken the pagination token in case any was returned before\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'listDevices',\n\t    value: function listDevices(limit, paginationToken, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('listDevices', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        Limit: limit,\n\t        PaginationToken: paginationToken\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to globally revoke all tokens issued to a user\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'globalSignOut',\n\t    value: function globalSignOut(callback) {\n\t      var _this10 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('globalSignOut', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this10.clearCachedTokens();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used for the user to signOut of the application and clear the cached tokens.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signOut',\n\t    value: function signOut() {\n\t      this.signInUserSession = null;\n\t      this.clearCachedTokens();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUser;\n\t}();\n\t\n\texports.default = CognitoUser;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserAttribute = function () {\n\t  /**\n\t   * Constructs a new CognitoUserAttribute object\n\t   * @param {string=} Name The record's name\n\t   * @param {string=} Value The record's value\n\t   */\n\t  function CognitoUserAttribute() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        Name = _ref.Name,\n\t        Value = _ref.Value;\n\t\n\t    _classCallCheck(this, CognitoUserAttribute);\n\t\n\t    this.Name = Name || '';\n\t    this.Value = Value || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's value.\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserAttribute, [{\n\t    key: 'getValue',\n\t    value: function getValue() {\n\t      return this.Value;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's value.\n\t     * @param {string} value The new value.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setValue',\n\t    value: function setValue(value) {\n\t      this.Value = value;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's name.\n\t     */\n\t\n\t  }, {\n\t    key: 'getName',\n\t    value: function getName() {\n\t      return this.Name;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's name\n\t     * @param {string} name The new name.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setName',\n\t    value: function setName(name) {\n\t      this.Name = name;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} a string representation of the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return JSON.stringify(this);\n\t    }\n\t\n\t    /**\n\t     * @returns {object} a flat object representing the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toJSON',\n\t    value: function toJSON() {\n\t      return {\n\t        Name: this.Name,\n\t        Value: this.Value\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserAttribute;\n\t}();\n\t\n\texports.default = CognitoUserAttribute;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserSession = function () {\n\t  /**\n\t   * Constructs a new CognitoUserSession object\n\t   * @param {string} IdToken The session's Id token.\n\t   * @param {string=} RefreshToken The session's refresh token.\n\t   * @param {string} AccessToken The session's access token.\n\t   */\n\t  function CognitoUserSession() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken,\n\t        RefreshToken = _ref.RefreshToken,\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoUserSession);\n\t\n\t    if (AccessToken == null || IdToken == null) {\n\t      throw new Error('Id token and Access Token must be present.');\n\t    }\n\t\n\t    this.idToken = IdToken;\n\t    this.refreshToken = RefreshToken;\n\t    this.accessToken = AccessToken;\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoIdToken} the session's Id token\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserSession, [{\n\t    key: 'getIdToken',\n\t    value: function getIdToken() {\n\t      return this.idToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoRefreshToken} the session's refresh token\n\t     */\n\t\n\t  }, {\n\t    key: 'getRefreshToken',\n\t    value: function getRefreshToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoAccessToken} the session's access token\n\t     */\n\t\n\t  }, {\n\t    key: 'getAccessToken',\n\t    value: function getAccessToken() {\n\t      return this.accessToken;\n\t    }\n\t\n\t    /**\n\t     * Checks to see if the session is still valid based on session expiry information found\n\t     * in tokens and the current time\n\t     * @returns {boolean} if the session is still valid\n\t     */\n\t\n\t  }, {\n\t    key: 'isValid',\n\t    value: function isValid() {\n\t      var now = Math.floor(new Date() / 1000);\n\t\n\t      return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserSession;\n\t}();\n\t\n\texports.default = CognitoUserSession;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t  function DateHelper() {\n\t    _classCallCheck(this, DateHelper);\n\t  }\n\t\n\t  _createClass(DateHelper, [{\n\t    key: 'getNowString',\n\t\n\t    /**\n\t     * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n\t     */\n\t    value: function getNowString() {\n\t      var now = new Date();\n\t\n\t      var weekDay = weekNames[now.getUTCDay()];\n\t      var month = monthNames[now.getUTCMonth()];\n\t      var day = now.getUTCDate();\n\t\n\t      var hours = now.getUTCHours();\n\t      if (hours < 10) {\n\t        hours = '0' + hours;\n\t      }\n\t\n\t      var minutes = now.getUTCMinutes();\n\t      if (minutes < 10) {\n\t        minutes = '0' + minutes;\n\t      }\n\t\n\t      var seconds = now.getUTCSeconds();\n\t      if (seconds < 10) {\n\t        seconds = '0' + seconds;\n\t      }\n\t\n\t      var year = now.getUTCFullYear();\n\t\n\t      // ddd MMM D HH:mm:ss UTC YYYY\n\t      var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t      return dateNow;\n\t    }\n\t  }]);\n\t\n\t  return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\tvar dataMemory = {};\n\tvar storageWindow = window.localStorage;\n\t\n\t/** @class */\n\t\n\tvar MemoryStorage = function () {\n\t  function MemoryStorage() {\n\t    _classCallCheck(this, MemoryStorage);\n\t  }\n\t\n\t  _createClass(MemoryStorage, null, [{\n\t    key: 'setItem',\n\t\n\t\n\t    /**\n\t     * This is used to set a specific item in storage\n\t     * @param {string} key - the key for the item\n\t     * @param {object} value - the value\n\t     * @returns {string} value that was set\n\t     */\n\t    value: function setItem(key, value) {\n\t      dataMemory[key] = value;\n\t      return dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to get a specific key from storage\n\t     * @param {string} key - the key for the item\n\t     * This is used to clear the storage\n\t     * @returns {string} the data item\n\t     */\n\t\n\t  }, {\n\t    key: 'getItem',\n\t    value: function getItem(key) {\n\t      console.log('getting item from storage ...');\n\t      return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to remove an item from storage\n\t     * @param {string} key - the key being set\n\t     * @returns {string} value - value that was deleted\n\t     */\n\t\n\t  }, {\n\t    key: 'removeItem',\n\t    value: function removeItem(key) {\n\t      return delete dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the storage\n\t     * @returns {string} nothing\n\t     */\n\t\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      dataMemory = {};\n\t      return dataMemory;\n\t    }\n\t  }]);\n\t\n\t  return MemoryStorage;\n\t}();\n\t\n\t/** @class */\n\t\n\t\n\tvar StorageHelper = function () {\n\t\n\t  /**\n\t   * This is used to get a storage object\n\t   * @returns {object} the storage\n\t   */\n\t  function StorageHelper() {\n\t    _classCallCheck(this, StorageHelper);\n\t\n\t    try {\n\t      storageWindow.setItem('aws.cognito.test-ls', 1);\n\t      storageWindow.removeItem('aws.cognito.test-ls');\n\t    } catch (exception) {\n\t      storageWindow = MemoryStorage;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * This is used to return the storage\n\t   * @returns {object} the storage\n\t   */\n\t\n\t\n\t  _createClass(StorageHelper, [{\n\t    key: 'getStorage',\n\t    value: function getStorage() {\n\t      return storageWindow;\n\t    }\n\t  }]);\n\t\n\t  return StorageHelper;\n\t}();\n\t\n\texports.default = StorageHelper;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar AuthenticationDetails = function () {\n\t  /**\n\t   * Constructs a new AuthenticationDetails object\n\t   * @param {object=} data Creation options.\n\t   * @param {string} data.Username User being authenticated.\n\t   * @param {string} data.Password Plain-text password to authenticate with.\n\t   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n\t   */\n\t  function AuthenticationDetails(data) {\n\t    _classCallCheck(this, AuthenticationDetails);\n\t\n\t    var _ref = data || {},\n\t        ValidationData = _ref.ValidationData,\n\t        Username = _ref.Username,\n\t        Password = _ref.Password;\n\t\n\t    this.validationData = ValidationData || [];\n\t    this.username = Username;\n\t    this.password = Password;\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's username\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationDetails, [{\n\t    key: \"getUsername\",\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's password\n\t     */\n\t\n\t  }, {\n\t    key: \"getPassword\",\n\t    value: function getPassword() {\n\t      return this.password;\n\t    }\n\t\n\t    /**\n\t     * @returns {Array} the record's validationData\n\t     */\n\t\n\t  }, {\n\t    key: \"getValidationData\",\n\t    value: function getValidationData() {\n\t      return this.validationData;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationDetails;\n\t}();\n\t\n\texports.default = AuthenticationDetails;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * or in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(11);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tvar _CognitoUser2 = _interopRequireDefault(_CognitoUser);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoUserPool = function () {\n\t  /**\n\t   * Constructs a new CognitoUserPool object\n\t   * @param {object} data Creation options.\n\t   * @param {string} data.UserPoolId Cognito user pool id.\n\t   * @param {string} data.ClientId User pool application client id.\n\t   * @param {int=} data.Paranoia Random number generation paranoia level.\n\t   */\n\t  function CognitoUserPool(data) {\n\t    _classCallCheck(this, CognitoUserPool);\n\t\n\t    var _ref = data || {},\n\t        UserPoolId = _ref.UserPoolId,\n\t        ClientId = _ref.ClientId,\n\t        Paranoia = _ref.Paranoia;\n\t\n\t    if (!UserPoolId || !ClientId) {\n\t      throw new Error('Both UserPoolId and ClientId are required.');\n\t    }\n\t    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n\t      throw new Error('Invalid UserPoolId format.');\n\t    }\n\t    var region = UserPoolId.split('_')[0];\n\t\n\t    this.userPoolId = UserPoolId;\n\t    this.clientId = ClientId;\n\t    this.paranoia = Paranoia || 0;\n\t\n\t    this.client = new _cognitoidentityserviceprovider2.default({ apiVersion: '2016-04-19', region: region });\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the user pool id\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserPool, [{\n\t    key: 'getUserPoolId',\n\t    value: function getUserPoolId() {\n\t      return this.userPoolId;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the client id\n\t     */\n\t\n\t  }, {\n\t    key: 'getClientId',\n\t    value: function getClientId() {\n\t      return this.clientId;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the paranoia level\n\t     */\n\t\n\t  }, {\n\t    key: 'getParanoia',\n\t    value: function getParanoia() {\n\t      return this.paranoia;\n\t    }\n\t\n\t    /**\n\t     * sets paranoia level\n\t     * @param {int} paranoia The new paranoia level.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setParanoia',\n\t    value: function setParanoia(paranoia) {\n\t      this.paranoia = paranoia;\n\t    }\n\t\n\t    /**\n\t     * @typedef {object} SignUpResult\n\t     * @property {CognitoUser} user New user.\n\t     * @property {bool} userConfirmed If the user is already confirmed.\n\t     */\n\t    /**\n\t     * method for signing up a user\n\t     * @param {string} username User's username.\n\t     * @param {string} password Plain-text initial password entered by user.\n\t     * @param {(AttributeArg[])=} userAttributes New user attributes.\n\t     * @param {(AttributeArg[])=} validationData Application metadata.\n\t     * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signUp',\n\t    value: function signUp(username, password, userAttributes, validationData, callback) {\n\t      var _this = this;\n\t\n\t      this.client.makeUnauthenticatedRequest('signUp', {\n\t        ClientId: this.clientId,\n\t        Username: username,\n\t        Password: password,\n\t        UserAttributes: userAttributes,\n\t        ValidationData: validationData\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var cognitoUser = {\n\t          Username: username,\n\t          Pool: _this\n\t        };\n\t\n\t        var returnData = {\n\t          user: new _CognitoUser2.default(cognitoUser),\n\t          userConfirmed: data.UserConfirmed\n\t        };\n\t\n\t        return callback(null, returnData);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * method for getting the current user of the application from the local storage\n\t     *\n\t     * @returns {CognitoUser} the user retrieved from storage\n\t     */\n\t\n\t  }, {\n\t    key: 'getCurrentUser',\n\t    value: function getCurrentUser() {\n\t      var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      var lastAuthUser = storage.getItem(lastUserKey);\n\t      if (lastAuthUser) {\n\t        var cognitoUser = {\n\t          Username: lastAuthUser,\n\t          Pool: this\n\t        };\n\t\n\t        return new _CognitoUser2.default(cognitoUser);\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserPool;\n\t}();\n\t\n\texports.default = CognitoUserPool;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _AuthenticationDetails = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'AuthenticationDetails', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationDetails).default;\n\t  }\n\t});\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'AuthenticationHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationHelper).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'CognitoUser', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUser).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'CognitoUserAttribute', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserAttribute).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserPool = __webpack_require__(14);\n\t\n\tObject.defineProperty(exports, 'CognitoUserPool', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserPool).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'CognitoUserSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// amazon-cognito-identity.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 97bad3fe0438b02f499f","import CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\nimport * as enhancements from './src';\n\nexport * from './src';\n\nObject.keys(enhancements).forEach(key => {\n  CognitoIdentityServiceProvider[key] = enhancements[key];\n});\n\n\n\n// WEBPACK FOOTER //\n// ./enhance.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sjcl\"\n// module id = 1\n// module chunks = 0","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\nimport { BigInteger } from 'jsbn';\n\nconst initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1'\n  + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD'\n  + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245'\n  + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED'\n  + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D'\n  + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F'\n  + '83655D23DCA3AD961C62F356208552BB9ED529077096966D'\n  + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B'\n  + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9'\n  + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510'\n  + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64'\n  + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7'\n  + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B'\n  + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C'\n  + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31'\n  + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\nconst newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\nexport default class AuthenticationHelper {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   * @param {int} paranoia Random number generation paranoia level.\n   */\n  constructor(PoolName, paranoia) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2');\n    this.k = new BigInteger(this.hexHash(`00${this.N.toString(16)}0${this.g.toString(16)}`), 16);\n\n    this.paranoia = paranoia;\n\n    this.smallAValue = this.generateRandomSmallA();\n    this.largeAValue = this.calculateA(this.smallAValue);\n\n    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\n\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n  getSmallAValue() {\n    return this.smallAValue;\n  }\n\n  /**\n   * @returns {BigInteger} large A, a value generated from small A\n   */\n  getLargeAValue() {\n    return this.largeAValue;\n  }\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n  generateRandomSmallA() {\n    const words = sjcl.random.randomWords(32, this.paranoia);\n    const hexRandom = sjcl.codec.hex.fromBits(words);\n\n    const randomBigInt = new BigInteger(hexRandom, 16);\n    const smallABigInt = randomBigInt.mod(this.N);\n\n    return smallABigInt;\n  }\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n  generateRandomString() {\n    const words = sjcl.random.randomWords(10, this.paranoia);\n    const stringRandom = sjcl.codec.base64.fromBits(words);\n\n    return stringRandom;\n  }\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  getRandomPassword() {\n    return this.randomPassword;\n  }\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  getVerifierDevices() {\n    return this.verifierDevices;\n  }\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @returns {void}\n   */\n  generateHashDevice(deviceGroupKey, username) {\n    this.randomPassword = this.generateRandomString();\n    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\n    const hashedString = this.hash(combinedString);\n\n    const words = sjcl.random.randomWords(4, this.paranoia);\n    const hexRandom = sjcl.codec.hex.fromBits(words);\n    const saltDevices = new BigInteger(hexRandom, 16);\n    const firstCharSalt = saltDevices.toString(16)[0];\n    this.SaltToHashDevices = saltDevices.toString(16);\n\n    if (saltDevices.toString(16).length % 2 === 1) {\n      this.SaltToHashDevices = `0${this.SaltToHashDevices}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n      this.SaltToHashDevices = `00${this.SaltToHashDevices}`;\n    }\n    const verifierDevicesNotPadded = this.g.modPow(\n      new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16),\n      this.N);\n\n    const firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\n    this.verifierDevices = verifierDevicesNotPadded.toString(16);\n\n    if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\n      this.verifierDevices = `0${this.verifierDevices}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\n      this.verifierDevices = `00${this.verifierDevices}`;\n    }\n  }\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @returns {BigInteger} Computed large A.\n   * @private\n   */\n  calculateA(a) {\n    const A = this.g.modPow(a, this.N);\n\n    if (A.mod(this.N).toString() === '0') {\n      throw new Error('Illegal paramater. A mod N cannot be 0.');\n    }\n    return A;\n  }\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n  calculateU(A, B) {\n    const firstCharA = A.toString(16)[0];\n    const firstCharB = B.toString(16)[0];\n    let AToHash = A.toString(16);\n    let BToHash = B.toString(16);\n\n    if (A.toString(16).length % 2 === 1) {\n      AToHash = `0${AToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\n      AToHash = `00${AToHash}`;\n    }\n\n    if (B.toString(16).length % 2 === 1) {\n      BToHash = `0${BToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\n      BToHash = `00${BToHash}`;\n    }\n\n    this.UHexHash = this.hexHash(AToHash + BToHash);\n    const finalU = new BigInteger(this.UHexHash, 16);\n\n    return finalU;\n  }\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {sjcl.bitArray} bitArray Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hash(bitArray) {\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\n  }\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hexHash(hexStr) {\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\n  }\n\n  /**\n   * Standard hkdf algorithm\n   * @param {sjcl.bitArray} ikm Input key material.\n   * @param {sjcl.bitArray} salt Salt value.\n   * @returns {sjcl.bitArray} Strong key material.\n   * @private\n   */\n  computehkdf(ikm, salt) {\n    const mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\n    mac.update(ikm);\n    const prk = mac.digest();\n    const hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\n    const infoBitsUpdate = sjcl.bitArray.concat(\n      this.infoBits,\n      sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\n    hmac.update(infoBitsUpdate);\n\n    return sjcl.bitArray.clamp(hmac.digest(), 128);\n  }\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @returns {sjcl.bitArray} Computed HKDF value.\n   */\n  getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n    if (serverBValue.mod(this.N).equals(new BigInteger('0', 16))) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(new BigInteger('0', 16))) {\n      throw new Error('U cannot be zero.');\n    }\n\n    const usernamePassword = `${this.poolName}${username}:${password}`;\n    const usernamePasswordHash = this.hash(usernamePassword);\n\n    const firstCharSalt = salt.toString(16)[0];\n    let SaltToHash = salt.toString(16);\n\n    if (salt.toString(16).length % 2 === 1) {\n      SaltToHash = `0${SaltToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n      SaltToHash = `00${SaltToHash}`;\n    }\n\n    const xValue = new BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\n\n    const gModPowXN = this.g.modPow(xValue, this.N);\n    const intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n    const sValue = intValue2.modPow(\n      this.smallAValue.add(this.UValue.multiply(xValue)),\n      this.N\n    ).mod(this.N);\n\n    let SToHash = sValue.toString(16);\n    const firstCharS = sValue.toString(16)[0];\n\n    if (sValue.toString(16).length % 2 === 1) {\n      SToHash = `0${SToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\n      SToHash = `00${SToHash}`;\n    }\n\n    let UValueToHash = this.UHexHash;\n    const firstCharU = this.UHexHash[0];\n\n    if (this.UHexHash.length % 2 === 1) {\n      UValueToHash = `0${UValueToHash}`;\n    } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\n      UValueToHash = `00${UValueToHash}`;\n    }\n\n    const hkdf = this.computehkdf(\n      sjcl.codec.hex.toBits(SToHash),\n      sjcl.codec.hex.toBits(UValueToHash));\n\n    return hkdf;\n  }\n\n  /**\n  * Return constant newPasswordRequiredChallengeUserAttributePrefix\n  * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n  */\n  getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AuthenticationHelper.js","/*\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\n\n/** @class */\nexport default class CognitoAccessToken {\n  /**\n   * Constructs a new CognitoAccessToken object\n   * @param {string=} AccessToken The JWT access token.\n   */\n  constructor({ AccessToken } = {}) {\n    // Assign object\n    this.jwtToken = AccessToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n    return expiration.exp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAccessToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\n\n/** @class */\nexport default class CognitoIdToken {\n  /**\n   * Constructs a new CognitoIdToken object\n   * @param {string=} IdToken The JWT Id token\n   */\n  constructor({ IdToken } = {}) {\n    // Assign object\n    this.jwtToken = IdToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n    return expiration.exp;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoIdToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoRefreshToken {\n  /**\n   * Constructs a new CognitoRefreshToken object\n   * @param {string=} RefreshToken The JWT refresh token.\n   */\n  constructor({ RefreshToken } = {}) {\n    // Assign object\n    this.token = RefreshToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getToken() {\n    return this.token;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoRefreshToken.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\nimport { BigInteger } from 'jsbn';\n\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n\n/** @class */\nexport default class CognitoUser {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   */\n  constructor(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n\n    this.client = data.Pool.client;\n\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n  }\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  getSignInUserSession() {\n    return this.signInUserSession;\n  }\n\n  /**\n   * @returns {string} the user's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {String} the authentication flow type\n   */\n  getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n\n  /**\n   * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  authenticateUser(authDetails, callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.pool.getUserPoolId().split('_')[1],\n      this.pool.getParanoia());\n    const dateHelper = new DateHelper();\n\n    let serverBValue;\n    let salt;\n    const authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n      authParameters.CHALLENGE_NAME = 'SRP_A';\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      AuthFlow: this.authenticationFlowType,\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      this.username = challengeParameters.USER_ID_FOR_SRP;\n      serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      salt = new BigInteger(challengeParameters.SALT, 16);\n      this.getCachedDeviceKeyAndPassword();\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.username,\n        authDetails.getPassword(),\n        serverBValue,\n        salt);\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n      mac.update(sjcl.codec.utf8String.toBits(this.pool.getUserPoolId().split('_')[1]));\n      mac.update(sjcl.codec.utf8String.toBits(this.username));\n      mac.update(secretBlockBits);\n      const dateNow = dateHelper.getNowString();\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\n      const signature = mac.digest();\n      const signatureString = sjcl.codec.base64.fromBits(signature);\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n      if (this.deviceKey != null) {\n        challengeResponses.DEVICE_KEY = this.deviceKey;\n      }\n\n      const respondToAuthChallenge = (challenge, challengeCallback) =>\n        this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge,\n          (errChallenge, dataChallenge) => {\n            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' &&\n                errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n              challengeResponses.DEVICE_KEY = null;\n              this.deviceKey = null;\n              this.randomPassword = null;\n              this.deviceGroupKey = null;\n              this.clearCachedDeviceKeyAndPassword();\n              return respondToAuthChallenge(challenge, challengeCallback);\n            }\n            return challengeCallback(errChallenge, dataChallenge);\n          });\n\n      respondToAuthChallenge({\n        ChallengeName: 'PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        const challengeName = dataAuthenticate.ChallengeName;\n        if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n          this.Session = dataAuthenticate.Session;\n          let userAttributes = null;\n          let rawRequiredAttributes = null;\n          const requiredAttributes = [];\n          const userAttributesPrefix = authenticationHelper\n            .getNewPasswordRequiredChallengeUserAttributePrefix();\n\n          if (dataAuthenticate.ChallengeParameters) {\n            userAttributes = JSON.parse(\n              dataAuthenticate.ChallengeParameters.userAttributes);\n            rawRequiredAttributes = JSON.parse(\n              dataAuthenticate.ChallengeParameters.requiredAttributes);\n          }\n\n          if (rawRequiredAttributes) {\n            for (let i = 0; i < rawRequiredAttributes.length; i++) {\n              requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n            }\n          }\n          return callback.newPasswordRequired(userAttributes, requiredAttributes);\n        }\n        return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {object} dataAuthenticate authentication data\n  * @param {object} authenticationHelper helper created\n  * @param {callback} callback passed on from caller\n  * @returns {void}\n  */\n  authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    const challengeName = dataAuthenticate.ChallengeName;\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(dataAuthenticate.ChallengeParameters);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.cacheTokens();\n\n    const newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n    const deviceSecretVerifierConfig = {\n      Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n              authenticationHelper.getSaltDevices().toString(16))),\n      PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n              authenticationHelper.getVerifierDevices().toString(16))),\n    };\n\n    this.verifierDevices = sjcl.codec.base64.fromBits(\n      authenticationHelper.getVerifierDevices());\n    this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n    this.randomPassword = authenticationHelper.getRandomPassword();\n\n    this.client.makeUnauthenticatedRequest('confirmDevice', {\n      DeviceKey: newDeviceMetadata.DeviceKey,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n      DeviceName: navigator.userAgent,\n    }, (errConfirm, dataConfirm) => {\n      if (errConfirm) {\n        return callback.onFailure(errConfirm);\n      }\n\n      this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n      this.cacheDeviceKeyAndPassword();\n      if (dataConfirm.UserConfirmationNecessary === true) {\n        return callback.onSuccess(\n          this.signInUserSession, dataConfirm.UserConfirmationNecessary);\n      }\n      return callback.onSuccess(this.signInUserSession);\n    });\n    return undefined;\n  }\n\n  /**\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n  * Pass the new password with any new user attributes to be updated.\n  * User attribute keys must be of format userAttributes.<attribute_name>.\n  * @param {string} newPassword new password for this user\n  * @param {object} requiredAttributeData map with values for all required attributes\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *         response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n  completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    const authenticationHelper = new AuthenticationHelper(\n      this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\n    const userAttributesPrefix = authenticationHelper\n      .getNewPasswordRequiredChallengeUserAttributePrefix();\n\n    const finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach((key) => {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n    }, (errAuthenticate, dataAuthenticate) => {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   * @private\n   */\n  getDeviceResponse(callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.deviceGroupKey,\n      this.pool.getParanoia());\n    const dateHelper = new DateHelper();\n\n    const authParameters = {};\n\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'DEVICE_SRP_AUTH',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: authParameters,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      const serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      const salt = new BigInteger(challengeParameters.SALT, 16);\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.deviceKey,\n        this.randomPassword,\n        serverBValue,\n        salt);\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceGroupKey));\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceKey));\n      mac.update(secretBlockBits);\n      const dateNow = dateHelper.getNowString();\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\n      const signature = mac.digest();\n      const signatureString = sjcl.codec.base64.fromBits(signature);\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n        this.cacheTokens();\n\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n    this.client.makeUnauthenticatedRequest('confirmSignUp', {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challange answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendCustomChallengeAnswer(answerChallenge, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeName = data.ChallengeName;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        this.Session = data.Session;\n        return callback.customChallenge(data.challengeParameters);\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(data.AuthenticationResult);\n      this.cacheTokens();\n      return callback.onSuccess(this.signInUserSession);\n    });\n  }\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendMFACode(confirmationCode, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'SMS_MFA',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, dataAuthenticate) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        this.getDeviceResponse(callback);\n        return undefined;\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      this.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(this.signInUserSession);\n      }\n\n      const authenticationHelper = new AuthenticationHelper(\n        this.pool.getUserPoolId().split('_')[1],\n        this.pool.getParanoia());\n      authenticationHelper.generateHashDevice(\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n      const deviceSecretVerifierConfig = {\n        Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n          authenticationHelper.getSaltDevices().toString(16))),\n        PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n          authenticationHelper.getVerifierDevices().toString(16))),\n      };\n\n      this.verifierDevices = sjcl.codec.base64.fromBits(\n        authenticationHelper.getVerifierDevices());\n      this.deviceGroupKey = dataAuthenticate.AuthenticationResult\n        .NewDeviceMetadata.DeviceGroupKey;\n      this.randomPassword = authenticationHelper.getRandomPassword();\n\n      this.client.makeUnauthenticatedRequest('confirmDevice', {\n        DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent,\n      }, (errConfirm, dataConfirm) => {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        this.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(\n            this.signInUserSession,\n            dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  changePassword(oldUserPassword, newUserPassword, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('changePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n    const mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number',\n    };\n    mfaOptions.push(mfaEnabled);\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to disable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n\n  /**\n   * This is used by an authenticated user to delete himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteUser(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      this.clearCachedTokens();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  updateAttributes(attributes, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, userData) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const attributeList = [];\n\n      for (let i = 0; i < userData.UserAttributes.length; i++) {\n        const attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value,\n        };\n        const userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  resendConfirmationCode(callback) {\n    this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const idTokenKey = `${keyPrefix}.idToken`;\n    const accessTokenKey = `${keyPrefix}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.refreshToken`;\n\n    const storage = new StorageHelper().getStorage();\n\n    if (storage.getItem(idTokenKey)) {\n      const idToken = new CognitoIdToken({\n        IdToken: storage.getItem(idTokenKey),\n      });\n      const accessToken = new CognitoAccessToken({\n        AccessToken: storage.getItem(accessTokenKey),\n      });\n      const refreshToken = new CognitoRefreshToken({\n        RefreshToken: storage.getItem(refreshTokenKey),\n      });\n\n      const sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n      };\n      const cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (refreshToken.getToken() == null) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    }\n    return undefined;\n  }\n\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  refreshSession(refreshToken, callback) {\n    const authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n    const storage = new StorageHelper().getStorage();\n\n    if (storage.getItem(lastUserKey)) {\n      this.username = storage.getItem(lastUserKey);\n      const deviceKeyKey = `${keyPrefix}.${this.username}.deviceKey`;\n      this.deviceKey = storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n    }, (err, authResult) => {\n      if (err) {\n        return callback(err, null);\n      }\n      if (authResult) {\n        const authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        this.signInUserSession = this.getCognitoUserSession(authenticationResult);\n        this.cacheTokens();\n        return callback(null, this.signInUserSession);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  cacheTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    storage.setItem(lastUserKey, this.username);\n  }\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  cacheDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.setItem(deviceKeyKey, this.deviceKey);\n    storage.setItem(randomPasswordKey, this.randomPassword);\n    storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  getCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = new StorageHelper().getStorage();\n\n    if (storage.getItem(deviceKeyKey)) {\n      this.deviceKey = storage.getItem(deviceKeyKey);\n      this.randomPassword = storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n    }\n  }\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  clearCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.removeItem(deviceKeyKey);\n    storage.removeItem(randomPasswordKey);\n    storage.removeItem(deviceGroupKeyKey);\n  }\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  clearCachedTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    const storage = new StorageHelper().getStorage();\n\n    storage.removeItem(idTokenKey);\n    storage.removeItem(accessTokenKey);\n    storage.removeItem(refreshTokenKey);\n    storage.removeItem(lastUserKey);\n  }\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  getCognitoUserSession(authResult) {\n    const idToken = new CognitoIdToken(authResult);\n    const accessToken = new CognitoAccessToken(authResult);\n    const refreshToken = new CognitoRefreshToken(authResult);\n\n    const sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken,\n    };\n\n    return new CognitoUserSession(sessionData);\n  }\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess<void>?} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgotPassword(callback) {\n    this.client.makeUnauthenticatedRequest('forgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  confirmPassword(confirmationCode, newPassword, callback) {\n    this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @returns {void}\n   */\n  getAttributeVerificationCode(attributeName, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.inputVerificationCode(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('getDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('forgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgetDevice(callback) {\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: result => {\n        this.deviceKey = null;\n        this.deviceGroupKey = null;\n        this.randomPassword = null;\n        this.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      },\n    });\n  }\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('listDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  globalSignOut(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.makeUnauthenticatedRequest('globalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      this.clearCachedTokens();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  signOut() {\n    this.signInUserSession = null;\n    this.clearCachedTokens();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUser.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserAttribute {\n  /**\n   * Constructs a new CognitoUserAttribute object\n   * @param {string=} Name The record's name\n   * @param {string=} Value The record's value\n   */\n  constructor({ Name, Value } = {}) {\n    this.Name = Name || '';\n    this.Value = Value || '';\n  }\n\n  /**\n   * @returns {string} the record's value.\n   */\n  getValue() {\n    return this.Value;\n  }\n\n  /**\n   * Sets the record's value.\n   * @param {string} value The new value.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setValue(value) {\n    this.Value = value;\n    return this;\n  }\n\n  /**\n   * @returns {string} the record's name.\n   */\n  getName() {\n    return this.Name;\n  }\n\n  /**\n   * Sets the record's name\n   * @param {string} name The new name.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setName(name) {\n    this.Name = name;\n    return this;\n  }\n\n  /**\n   * @returns {string} a string representation of the record.\n   */\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * @returns {object} a flat object representing the record.\n   */\n  toJSON() {\n    return {\n      Name: this.Name,\n      Value: this.Value,\n    };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserAttribute.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserSession {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {string} IdToken The session's Id token.\n   * @param {string=} RefreshToken The session's refresh token.\n   * @param {string} AccessToken The session's access token.\n   */\n  constructor({ IdToken, RefreshToken, AccessToken } = {}) {\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n  }\n\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n  getIdToken() {\n    return this.idToken;\n  }\n\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time\n   * @returns {boolean} if the session is still valid\n   */\n  isValid() {\n    const now = Math.floor(new Date() / 1000);\n\n    return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserSession.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst monthNames =\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n/** @class */\nexport default class DateHelper {\n  /**\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n   */\n  getNowString() {\n    const now = new Date();\n\n    const weekDay = weekNames[now.getUTCDay()];\n    const month = monthNames[now.getUTCMonth()];\n    const day = now.getUTCDate();\n\n    let hours = now.getUTCHours();\n    if (hours < 10) {\n      hours = `0${hours}`;\n    }\n\n    let minutes = now.getUTCMinutes();\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    let seconds = now.getUTCSeconds();\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    const year = now.getUTCFullYear();\n\n    // ddd MMM D HH:mm:ss UTC YYYY\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n\n    return dateNow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DateHelper.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet dataMemory = {};\nlet storageWindow = window.localStorage;\n\n/** @class */\nclass MemoryStorage {\n\n  /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */\n  static setItem(key, value) {\n    dataMemory[key] = value;\n    return dataMemory[key];\n  }\n\n  /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */\n  static getItem(key) {\n    console.log('getting item from storage ...');\n    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n  }\n\n  /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */\n  static removeItem(key) {\n    return delete dataMemory[key];\n  }\n\n  /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */\n  static clear() {\n    dataMemory = {};\n    return dataMemory;\n  }\n}\n\n/** @class */\nexport default class StorageHelper {\n\n  /**\n   * This is used to get a storage object\n   * @returns {object} the storage\n   */\n  constructor() {\n    try {\n      storageWindow.setItem('aws.cognito.test-ls', 1);\n      storageWindow.removeItem('aws.cognito.test-ls');\n    } catch (exception) {\n      storageWindow = MemoryStorage;\n    }\n  }\n\n  /**\n   * This is used to return the storage\n   * @returns {object} the storage\n   */\n  getStorage() {\n    return storageWindow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StorageHelper.js","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}\n// module id = 12\n// module chunks = 0","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class AuthenticationDetails {\n  /**\n   * Constructs a new AuthenticationDetails object\n   * @param {object=} data Creation options.\n   * @param {string} data.Username User being authenticated.\n   * @param {string} data.Password Plain-text password to authenticate with.\n   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n   */\n  constructor(data) {\n    const { ValidationData, Username, Password } = data || {};\n    this.validationData = ValidationData || [];\n    this.username = Username;\n    this.password = Password;\n  }\n\n  /**\n   * @returns {string} the record's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {string} the record's password\n   */\n  getPassword() {\n    return this.password;\n  }\n\n  /**\n   * @returns {Array} the record's validationData\n   */\n  getValidationData() {\n    return this.validationData;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AuthenticationDetails.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\n\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\n\n/** @class */\nexport default class CognitoUserPool {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {int=} data.Paranoia Random number generation paranoia level.\n   */\n  constructor(data) {\n    const { UserPoolId, ClientId, Paranoia } = data || {};\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n    const region = UserPoolId.split('_')[0];\n\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.paranoia = Paranoia || 0;\n\n    this.client = new CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region });\n  }\n\n  /**\n   * @returns {string} the user pool id\n   */\n  getUserPoolId() {\n    return this.userPoolId;\n  }\n\n  /**\n   * @returns {string} the client id\n   */\n  getClientId() {\n    return this.clientId;\n  }\n\n  /**\n   * @returns {int} the paranoia level\n   */\n  getParanoia() {\n    return this.paranoia;\n  }\n\n  /**\n   * sets paranoia level\n   * @param {int} paranoia The new paranoia level.\n   * @returns {void}\n   */\n  setParanoia(paranoia) {\n    this.paranoia = paranoia;\n  }\n\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @returns {void}\n   */\n  signUp(username, password, userAttributes, validationData, callback) {\n    this.client.makeUnauthenticatedRequest('signUp', {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n    }, (err, data) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const cognitoUser = {\n        Username: username,\n        Pool: this,\n      };\n\n      const returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n      };\n\n      return callback(null, returnData);\n    });\n  }\n\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  getCurrentUser() {\n    const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\n    const storage = new StorageHelper().getStorage();\n\n    const lastAuthUser = storage.getItem(lastUserKey);\n    if (lastAuthUser) {\n      const cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n      };\n\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoUserPool.js","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default as AuthenticationDetails } from './AuthenticationDetails';\nexport { default as AuthenticationHelper } from './AuthenticationHelper';\nexport { default as CognitoAccessToken } from './CognitoAccessToken';\nexport { default as CognitoIdToken } from './CognitoIdToken';\nexport { default as CognitoRefreshToken } from './CognitoRefreshToken';\nexport { default as CognitoUser } from './CognitoUser';\nexport { default as CognitoUserAttribute } from './CognitoUserAttribute';\nexport { default as CognitoUserPool } from './CognitoUserPool';\nexport { default as CognitoUserSession } from './CognitoUserSession';\nexport { default as DateHelper } from './DateHelper';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}