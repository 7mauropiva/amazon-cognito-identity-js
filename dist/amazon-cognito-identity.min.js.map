{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-identity.min.js","webpack:///webpack/bootstrap 024200bbc98ba07e865e","webpack:///./C:/projects/amazon-cognito-identity-js/enhance.js","webpack:///external \"sjcl\"","webpack:///./C:/projects/amazon-cognito-identity-js/src/AuthenticationHelper.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/CognitoAccessToken.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/CognitoIdToken.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/CognitoRefreshToken.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/CognitoUser.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/CognitoUserAttribute.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/CognitoUserSession.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/DateHelper.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/StorageHelper.js","webpack:///external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}","webpack:///external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}","webpack:///./C:/projects/amazon-cognito-identity-js/src/AuthenticationDetails.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/CognitoUserPool.js","webpack:///./C:/projects/amazon-cognito-identity-js/src/index.js"],"names":["root","factory","exports","module","require","define","amd","AmazonCognitoIdentity","sjcl","AWSCognito","CognitoIdentityServiceProvider","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_11__","__WEBPACK_EXTERNAL_MODULE_12__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_interopRequireDefault","defineProperty","value","_src","keys","forEach","enumerable","get","_cognitoidentityserviceprovider","_cognitoidentityserviceprovider2","enhancements","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","_sjcl","_jsbn","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","paranoia","N","BigInteger","g","k","hexHash","toString","smallAValue","generateRandomSmallA","largeAValue","calculateA","infoBits","codec","utf8String","toBits","poolName","words","random","randomWords","hexRandom","hex","fromBits","randomBigInt","smallABigInt","mod","stringRandom","base64","randomPassword","SaltToHashDevices","verifierDevices","deviceGroupKey","username","generateRandomString","combinedString","hashedString","hash","saltDevices","firstCharSalt","indexOf","verifierDevicesNotPadded","modPow","firstCharVerifierDevices","a","A","Error","B","firstCharA","firstCharB","AToHash","BToHash","UHexHash","finalU","bitArray","hashHex","sha256","Array","join","hexStr","ikm","salt","mac","misc","hmac","update","prk","digest","infoBitsUpdate","concat","String","fromCharCode","clamp","password","serverBValue","equals","UValue","calculateU","usernamePassword","usernamePasswordHash","SaltToHash","xValue","gModPowXN","intValue2","subtract","multiply","sValue","add","SToHash","firstCharS","UValueToHash","firstCharU","hkdf","computehkdf","CognitoAccessToken","_ref","arguments","undefined","AccessToken","jwtToken","payload","split","expiration","JSON","parse","base64url","exp","CognitoIdToken","IdToken","CognitoRefreshToken","RefreshToken","token","_AuthenticationHelper","_AuthenticationHelper2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","_CognitoUserSession","_CognitoUserSession2","_DateHelper","_DateHelper2","_CognitoUserAttribute","_CognitoUserAttribute2","_StorageHelper","_StorageHelper2","CognitoUser","data","Username","Pool","pool","Session","client","signInUserSession","authenticationFlowType","authDetails","callback","_this","authenticationHelper","getUserPoolId","getParanoia","dateHelper","authParameters","deviceKey","DEVICE_KEY","USERNAME","SRP_A","getLargeAValue","CHALLENGE_NAME","makeUnauthenticatedRequest","AuthFlow","ClientId","getClientId","AuthParameters","ClientMetadata","getValidationData","err","onFailure","challengeParameters","ChallengeParameters","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","secretBlockBits","SECRET_BLOCK","dateNow","getNowString","signature","signatureString","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","message","toLowerCase","clearCachedDeviceKeyAndPassword","ChallengeName","ChallengeResponses","errAuthenticate","dataAuthenticate","challengeName","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","substr","newPasswordRequired","authenticateUserInternal","_this2","mfaRequired","customChallenge","getDeviceResponse","getCognitoUserSession","AuthenticationResult","cacheTokens","newDeviceMetadata","NewDeviceMetadata","onSuccess","generateHashDevice","DeviceGroupKey","DeviceKey","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","newPassword","requiredAttributeData","_this3","finalUserAttributes","NEW_PASSWORD","_this4","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","answerChallenge","_this5","ANSWER","_this6","SMS_MFA_CODE","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","_this7","clearCachedTokens","attributes","UserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","UserAttributeNames","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","storage","getStorage","getItem","idToken","accessToken","refreshToken","sessionData","cachedSession","getToken","refreshSession","_this8","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authResult","authenticationResult","setItem","getIdToken","getRefreshToken","randomPasswordKey","deviceGroupKeyKey","removeItem","inputVerificationCode","Password","attributeName","Code","_this9","forgetSpecificDevice","result","DeviceRememberedStatus","limit","paginationToken","Limit","PaginationToken","_this10","CognitoUserAttribute","name","stringify","CognitoUserSession","now","Math","floor","Date","getExpiration","monthNames","weekNames","DateHelper","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","_data","_storage","window","localStorage","MemoryStorage","StorageHelper","exception","AuthenticationDetails","ValidationData","validationData","_CognitoUser","_CognitoUser2","CognitoUserPool","UserPoolId","Paranoia","test","region","userPoolId","clientId","apiVersion","cognitoUser","returnData","user","userConfirmed","UserConfirmed","lastAuthUser","_AuthenticationDetails","_CognitoUserPool"],"mappings":"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","file":"amazon-cognito-identity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _src = __webpack_require__(15);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(11);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tObject.keys(enhancements).forEach(function (key) {\n\t  _cognitoidentityserviceprovider2.default[key] = enhancements[key];\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\tr\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * for the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(12);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\t\n\tvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\t\n\t/** @class */\n\t\n\tvar AuthenticationHelper = function () {\n\t  /**\r\n\t   * Constructs a new AuthenticationHelper object\r\n\t   * @param {string} PoolName Cognito user pool name.\r\n\t   * @param {int} paranoia Random number generation paranoia level.\r\n\t   */\n\t  function AuthenticationHelper(PoolName, paranoia) {\n\t    _classCallCheck(this, AuthenticationHelper);\n\t\n\t    this.N = new _jsbn.BigInteger(initN, 16);\n\t    this.g = new _jsbn.BigInteger('2');\n\t    this.k = new _jsbn.BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\t\n\t    this.paranoia = paranoia;\n\t\n\t    this.smallAValue = this.generateRandomSmallA();\n\t    this.largeAValue = this.calculateA(this.smallAValue);\n\t\n\t    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\n\t\n\t    this.poolName = PoolName;\n\t  }\n\t\n\t  /**\r\n\t   * @returns {BigInteger} small A, a random number\r\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationHelper, [{\n\t    key: 'getSmallAValue',\n\t    value: function getSmallAValue() {\n\t      return this.smallAValue;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {BigInteger} large A, a value generated from small A\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getLargeAValue',\n\t    value: function getLargeAValue() {\n\t      return this.largeAValue;\n\t    }\n\t\n\t    /**\r\n\t     * helper function to generate a random big integer\r\n\t     * @returns {BigInteger} a random value.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomSmallA',\n\t    value: function generateRandomSmallA() {\n\t      var words = sjcl.random.randomWords(32, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t\n\t      var randomBigInt = new _jsbn.BigInteger(hexRandom, 16);\n\t      var smallABigInt = randomBigInt.mod(this.N);\n\t\n\t      return smallABigInt;\n\t    }\n\t\n\t    /**\r\n\t     * helper function to generate a random string\r\n\t     * @returns {string} a random value.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomString',\n\t    value: function generateRandomString() {\n\t      var words = sjcl.random.randomWords(10, this.paranoia);\n\t      var stringRandom = sjcl.codec.base64.fromBits(words);\n\t\n\t      return stringRandom;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} Generated random value included in password hash.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getRandomPassword',\n\t    value: function getRandomPassword() {\n\t      return this.randomPassword;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} Generated random value included in devices hash.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getSaltDevices',\n\t    value: function getSaltDevices() {\n\t      return this.SaltToHashDevices;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} Value used to verify devices.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getVerifierDevices',\n\t    value: function getVerifierDevices() {\n\t      return this.verifierDevices;\n\t    }\n\t\n\t    /**\r\n\t     * Generate salts and compute verifier.\r\n\t     * @param {string} deviceGroupKey Devices to generate verifier for.\r\n\t     * @param {string} username User to generate verifier for.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'generateHashDevice',\n\t    value: function generateHashDevice(deviceGroupKey, username) {\n\t      this.randomPassword = this.generateRandomString();\n\t      var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n\t      var hashedString = this.hash(combinedString);\n\t\n\t      var words = sjcl.random.randomWords(4, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t      var saltDevices = new _jsbn.BigInteger(hexRandom, 16);\n\t      var firstCharSalt = saltDevices.toString(16)[0];\n\t      this.SaltToHashDevices = saltDevices.toString(16);\n\t\n\t      if (saltDevices.toString(16).length % 2 === 1) {\n\t        this.SaltToHashDevices = '0' + this.SaltToHashDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        this.SaltToHashDevices = '00' + this.SaltToHashDevices;\n\t      }\n\t      var verifierDevicesNotPadded = this.g.modPow(new _jsbn.BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N);\n\t\n\t      var firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\n\t      this.verifierDevices = verifierDevicesNotPadded.toString(16);\n\t\n\t      if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\n\t        this.verifierDevices = '0' + this.verifierDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\n\t        this.verifierDevices = '00' + this.verifierDevices;\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Calculate the client's public value A = g^a%N\r\n\t     * with the generated random number a\r\n\t     * @param {BigInteger} a Randomly generated small A.\r\n\t     * @returns {BigInteger} Computed large A.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateA',\n\t    value: function calculateA(a) {\n\t      var A = this.g.modPow(a, this.N);\n\t\n\t      if (A.mod(this.N).toString() === '0') {\n\t        throw new Error('Illegal paramater. A mod N cannot be 0.');\n\t      }\n\t      return A;\n\t    }\n\t\n\t    /**\r\n\t     * Calculate the client's value U which is the hash of A and B\r\n\t     * @param {BigInteger} A Large A value.\r\n\t     * @param {BigInteger} B Server B value.\r\n\t     * @returns {BigInteger} Computed U value.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateU',\n\t    value: function calculateU(A, B) {\n\t      var firstCharA = A.toString(16)[0];\n\t      var firstCharB = B.toString(16)[0];\n\t      var AToHash = A.toString(16);\n\t      var BToHash = B.toString(16);\n\t\n\t      if (A.toString(16).length % 2 === 1) {\n\t        AToHash = '0' + AToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\n\t        AToHash = '00' + AToHash;\n\t      }\n\t\n\t      if (B.toString(16).length % 2 === 1) {\n\t        BToHash = '0' + BToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\n\t        BToHash = '00' + BToHash;\n\t      }\n\t\n\t      this.UHexHash = this.hexHash(AToHash + BToHash);\n\t      var finalU = new _jsbn.BigInteger(this.UHexHash, 16);\n\t\n\t      return finalU;\n\t    }\n\t\n\t    /**\r\n\t     * Calculate a hash from a bitArray\r\n\t     * @param {sjcl.bitArray} bitArray Value to hash.\r\n\t     * @returns {String} Hex-encoded hash.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'hash',\n\t    value: function hash(bitArray) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\r\n\t     * Calculate a hash from a hex string\r\n\t     * @param {String} hexStr Value to hash.\r\n\t     * @returns {String} Hex-encoded hash.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'hexHash',\n\t    value: function hexHash(hexStr) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\r\n\t     * Standard hkdf algorithm\r\n\t     * @param {sjcl.bitArray} ikm Input key material.\r\n\t     * @param {sjcl.bitArray} salt Salt value.\r\n\t     * @returns {sjcl.bitArray} Strong key material.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'computehkdf',\n\t    value: function computehkdf(ikm, salt) {\n\t      var mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\n\t      mac.update(ikm);\n\t      var prk = mac.digest();\n\t      var hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\n\t      var infoBitsUpdate = sjcl.bitArray.concat(this.infoBits, sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\n\t      hmac.update(infoBitsUpdate);\n\t\n\t      return sjcl.bitArray.clamp(hmac.digest(), 128);\n\t    }\n\t\n\t    /**\r\n\t     * Calculates the final hkdf based on computed S value, and computed U value and the key\r\n\t     * @param {String} username Username.\r\n\t     * @param {String} password Password.\r\n\t     * @param {BigInteger} serverBValue Server B value.\r\n\t     * @param {BigInteger} salt Generated salt.\r\n\t     * @returns {sjcl.bitArray} Computed HKDF value.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getPasswordAuthenticationKey',\n\t    value: function getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n\t      if (serverBValue.mod(this.N).equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('B cannot be zero.');\n\t      }\n\t\n\t      this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\t\n\t      if (this.UValue.equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('U cannot be zero.');\n\t      }\n\t\n\t      var usernamePassword = '' + this.poolName + username + ':' + password;\n\t      var usernamePasswordHash = this.hash(usernamePassword);\n\t\n\t      var firstCharSalt = salt.toString(16)[0];\n\t      var SaltToHash = salt.toString(16);\n\t\n\t      if (salt.toString(16).length % 2 === 1) {\n\t        SaltToHash = '0' + SaltToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        SaltToHash = '00' + SaltToHash;\n\t      }\n\t\n\t      var xValue = new _jsbn.BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\n\t\n\t      var gModPowXN = this.g.modPow(xValue, this.N);\n\t      var intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n\t      var sValue = intValue2.modPow(this.smallAValue.add(this.UValue.multiply(xValue)), this.N).mod(this.N);\n\t\n\t      var SToHash = sValue.toString(16);\n\t      var firstCharS = sValue.toString(16)[0];\n\t\n\t      if (sValue.toString(16).length % 2 === 1) {\n\t        SToHash = '0' + SToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\n\t        SToHash = '00' + SToHash;\n\t      }\n\t\n\t      var UValueToHash = this.UHexHash;\n\t      var firstCharU = this.UHexHash[0];\n\t\n\t      if (this.UHexHash.length % 2 === 1) {\n\t        UValueToHash = '0' + UValueToHash;\n\t      } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\n\t        UValueToHash = '00' + UValueToHash;\n\t      }\n\t\n\t      var hkdf = this.computehkdf(sjcl.codec.hex.toBits(SToHash), sjcl.codec.hex.toBits(UValueToHash));\n\t\n\t      return hkdf;\n\t    }\n\t\n\t    /**\r\n\t    * Return constant newPasswordRequiredChallengeUserAttributePrefix\r\n\t    * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\r\n\t    */\n\t\n\t  }, {\n\t    key: 'getNewPasswordRequiredChallengeUserAttributePrefix',\n\t    value: function getNewPasswordRequiredChallengeUserAttributePrefix() {\n\t      return newPasswordRequiredChallengeUserAttributePrefix;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationHelper;\n\t}();\n\t\n\texports.default = AuthenticationHelper;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\tr\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\r\n\t   * Constructs a new CognitoAccessToken object\r\n\t   * @param {string=} AccessToken The JWT access token.\r\n\t   */\n\t  function CognitoAccessToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's token.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoAccessToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {int} the token's expiration (exp member).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\r\n\t   * Constructs a new CognitoIdToken object\r\n\t   * @param {string=} IdToken The JWT Id token\r\n\t   */\n\t  function CognitoIdToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken;\n\t\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's token.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoIdToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {int} the token's expiration (exp member).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\r\n\t   * Constructs a new CognitoRefreshToken object\r\n\t   * @param {string=} RefreshToken The JWT refresh token.\r\n\t   */\n\t  function CognitoRefreshToken() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        RefreshToken = _ref.RefreshToken;\n\t\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.token = RefreshToken || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's token.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoRefreshToken, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.token;\n\t    }\n\t  }]);\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\tr\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(12);\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tvar _AuthenticationHelper2 = _interopRequireDefault(_AuthenticationHelper);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tvar _CognitoUserSession2 = _interopRequireDefault(_CognitoUserSession);\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tvar _DateHelper2 = _interopRequireDefault(_DateHelper);\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tvar _CognitoUserAttribute2 = _interopRequireDefault(_CognitoUserAttribute);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * @callback nodeCallback\r\n\t * @template T result\r\n\t * @param {*} err The operation failure reason, or null.\r\n\t * @param {T} result The operation result.\r\n\t */\n\t\n\t/**\r\n\t * @callback onFailure\r\n\t * @param {*} err Failure reason.\r\n\t */\n\t\n\t/**\r\n\t * @callback onSuccess\r\n\t * @template T result\r\n\t * @param {T} result The operation result.\r\n\t */\n\t\n\t/**\r\n\t * @callback mfaRequired\r\n\t * @param {*} details MFA challenge details.\r\n\t */\n\t\n\t/**\r\n\t * @callback customChallenge\r\n\t * @param {*} details Custom challenge details.\r\n\t */\n\t\n\t/**\r\n\t * @callback inputVerificationCode\r\n\t * @param {*} data Server response.\r\n\t */\n\t\n\t/**\r\n\t * @callback authSuccess\r\n\t * @param {CognitoUserSession} session The new session.\r\n\t * @param {bool=} userConfirmationNecessary User must be confirmed.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoUser = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUser object\r\n\t   * @param {object} data Creation options\r\n\t   * @param {string} data.Username The user's username.\r\n\t   * @param {CognitoUserPool} data.Pool Pool containing the user.\r\n\t   */\n\t  function CognitoUser(data) {\n\t    _classCallCheck(this, CognitoUser);\n\t\n\t    if (data == null || data.Username == null || data.Pool == null) {\n\t      throw new Error('Username and pool information are required.');\n\t    }\n\t\n\t    this.username = data.Username || '';\n\t    this.pool = data.Pool;\n\t    this.Session = null;\n\t\n\t    this.client = data.Pool.client;\n\t\n\t    this.signInUserSession = null;\n\t    this.authenticationFlowType = 'USER_SRP_AUTH';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {CognitoUserSession} the current session for this user\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUser, [{\n\t    key: 'getSignInUserSession',\n\t    value: function getSignInUserSession() {\n\t      return this.signInUserSession;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the user's username\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {String} the authentication flow type\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getAuthenticationFlowType',\n\t    value: function getAuthenticationFlowType() {\n\t      return this.authenticationFlowType;\n\t    }\n\t\n\t    /**\r\n\t     * sets authentication flow type\r\n\t     * @param {string} authenticationFlowType New value.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setAuthenticationFlowType',\n\t    value: function setAuthenticationFlowType(authenticationFlowType) {\n\t      this.authenticationFlowType = authenticationFlowType;\n\t    }\n\t\n\t    /**\r\n\t     * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\r\n\t     * stuff\r\n\t     * @param {AuthenticationDetails} authDetails Contains the authentication data\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {newPasswordRequired} callback.newPasswordRequired new\r\n\t     *        password and any required attributes are required to continue\r\n\t     * @param {mfaRequired} callback.mfaRequired MFA code\r\n\t     *        required to continue.\r\n\t     * @param {customChallenge} callback.customChallenge Custom challenge\r\n\t     *        response required to continue.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'authenticateUser',\n\t    value: function authenticateUser(authDetails, callback) {\n\t      var _this = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var serverBValue = void 0;\n\t      var salt = void 0;\n\t      var authParameters = {};\n\t\n\t      if (this.deviceKey != null) {\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t        authParameters.CHALLENGE_NAME = 'SRP_A';\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        AuthFlow: this.authenticationFlowType,\n\t        ClientId: this.pool.getClientId(),\n\t        AuthParameters: authParameters,\n\t        ClientMetadata: authDetails.getValidationData()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        _this.username = challengeParameters.USER_ID_FOR_SRP;\n\t        serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t        _this.getCachedDeviceKeyAndPassword();\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this.username, authDetails.getPassword(), serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.pool.getUserPoolId().split('_')[1]));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.username));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\n\t        if (_this.deviceKey != null) {\n\t          challengeResponses.DEVICE_KEY = _this.deviceKey;\n\t        }\n\t\n\t        var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n\t          return _this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n\t            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n\t              challengeResponses.DEVICE_KEY = null;\n\t              _this.deviceKey = null;\n\t              _this.randomPassword = null;\n\t              _this.deviceGroupKey = null;\n\t              _this.clearCachedDeviceKeyAndPassword();\n\t              return respondToAuthChallenge(challenge, challengeCallback);\n\t            }\n\t            return challengeCallback(errChallenge, dataChallenge);\n\t          });\n\t        };\n\t\n\t        respondToAuthChallenge({\n\t          ChallengeName: 'PASSWORD_VERIFIER',\n\t          ClientId: _this.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          var challengeName = dataAuthenticate.ChallengeName;\n\t          if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            var userAttributes = null;\n\t            var rawRequiredAttributes = null;\n\t            var requiredAttributes = [];\n\t            var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t            if (dataAuthenticate.ChallengeParameters) {\n\t              userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n\t              rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n\t            }\n\t\n\t            if (rawRequiredAttributes) {\n\t              for (var i = 0; i < rawRequiredAttributes.length; i++) {\n\t                requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n\t              }\n\t            }\n\t            return callback.newPasswordRequired(userAttributes, requiredAttributes);\n\t          }\n\t          return _this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t    * PRIVATE ONLY: This is an internal only method and should not\r\n\t    * be directly called by the consumers.\r\n\t    * @param {object} dataAuthenticate authentication data\r\n\t    * @param {object} authenticationHelper helper created\r\n\t    * @param {callback} callback passed on from caller\r\n\t    * @returns {void}\r\n\t    */\n\t\n\t  }, {\n\t    key: 'authenticateUserInternal',\n\t    value: function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n\t      var _this2 = this;\n\t\n\t      var challengeName = dataAuthenticate.ChallengeName;\n\t      if (challengeName === 'SMS_MFA') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.mfaRequired(challengeName);\n\t      }\n\t\n\t      if (challengeName === 'CUSTOM_CHALLENGE') {\n\t        this.Session = dataAuthenticate.Session;\n\t        return callback.customChallenge(dataAuthenticate.ChallengeParameters);\n\t      }\n\t\n\t      if (challengeName === 'DEVICE_SRP_AUTH') {\n\t        this.getDeviceResponse(callback);\n\t        return undefined;\n\t      }\n\t\n\t      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t      this.cacheTokens();\n\t\n\t      var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t      if (newDeviceMetadata == null) {\n\t        return callback.onSuccess(this.signInUserSession);\n\t      }\n\t\n\t      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t      var deviceSecretVerifierConfig = {\n\t        Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t        PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t      };\n\t\n\t      this.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t      this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t      this.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t      this.client.makeUnauthenticatedRequest('confirmDevice', {\n\t        DeviceKey: newDeviceMetadata.DeviceKey,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t        DeviceName: navigator.userAgent\n\t      }, function (errConfirm, dataConfirm) {\n\t        if (errConfirm) {\n\t          return callback.onFailure(errConfirm);\n\t        }\n\t\n\t        _this2.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t        _this2.cacheDeviceKeyAndPassword();\n\t        if (dataConfirm.UserConfirmationNecessary === true) {\n\t          return callback.onSuccess(_this2.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t        }\n\t        return callback.onSuccess(_this2.signInUserSession);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t    * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\r\n\t    * Pass the new password with any new user attributes to be updated.\r\n\t    * User attribute keys must be of format userAttributes.<attribute_name>.\r\n\t    * @param {string} newPassword new password for this user\r\n\t    * @param {object} requiredAttributeData map with values for all required attributes\r\n\t    * @param {object} callback Result callback map.\r\n\t    * @param {onFailure} callback.onFailure Called on any error.\r\n\t    * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\r\n\t    * @param {customChallenge} callback.customChallenge Custom challenge\r\n\t    *         response required to continue.\r\n\t    * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t    * @returns {void}\r\n\t    */\n\t\n\t  }, {\n\t    key: 'completeNewPasswordChallenge',\n\t    value: function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n\t      var _this3 = this;\n\t\n\t      if (!newPassword) {\n\t        return callback.onFailure('New password is required.');\n\t      }\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\n\t      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\t\n\t      var finalUserAttributes = {};\n\t      if (requiredAttributeData) {\n\t        Object.keys(requiredAttributeData).forEach(function (key) {\n\t          finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n\t        });\n\t      }\n\t\n\t      finalUserAttributes.NEW_PASSWORD = newPassword;\n\t      finalUserAttributes.USERNAME = this.username;\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'NEW_PASSWORD_REQUIRED',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: finalUserAttributes,\n\t        Session: this.Session\n\t      }, function (errAuthenticate, dataAuthenticate) {\n\t        if (errAuthenticate) {\n\t          return callback.onFailure(errAuthenticate);\n\t        }\n\t        return _this3.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get a session using device authentication. It is called at the end of user\r\n\t     * authentication\r\n\t     *\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getDeviceResponse',\n\t    value: function getDeviceResponse(callback) {\n\t      var _this4 = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.deviceGroupKey, this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var authParameters = {};\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.DEVICE_KEY = this.deviceKey;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'DEVICE_SRP_AUTH',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: authParameters\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        var serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        var salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this4.deviceKey, _this4.randomPassword, serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this4.deviceGroupKey));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this4.deviceKey));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this4.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t        challengeResponses.DEVICE_KEY = _this4.deviceKey;\n\t\n\t        _this4.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t          ClientId: _this4.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          _this4.signInUserSession = _this4.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this4.cacheTokens();\n\t\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used for a certain user to confirm the registration by using a confirmation code\r\n\t     * @param {string} confirmationCode Code entered by user.\r\n\t     * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmRegistration',\n\t    value: function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmSignUp', {\n\t        ClientId: this.pool.getClientId(),\n\t        ConfirmationCode: confirmationCode,\n\t        Username: this.username,\n\t        ForceAliasCreation: forceAliasCreation\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used by the user once he has the responses to a custom challenge\r\n\t     * @param {string} answerChallenge The custom challange answer.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {customChallenge} callback.customChallenge\r\n\t     *    Custom challenge response required to continue.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'sendCustomChallengeAnswer',\n\t    value: function sendCustomChallengeAnswer(answerChallenge, callback) {\n\t      var _this5 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.ANSWER = answerChallenge;\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'CUSTOM_CHALLENGE',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = data.ChallengeName;\n\t\n\t        if (challengeName === 'CUSTOM_CHALLENGE') {\n\t          _this5.Session = data.Session;\n\t          return callback.customChallenge(data.challengeParameters);\n\t        }\n\t\n\t        _this5.signInUserSession = _this5.getCognitoUserSession(data.AuthenticationResult);\n\t        _this5.cacheTokens();\n\t        return callback.onSuccess(_this5.signInUserSession);\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used by the user once he has an MFA code\r\n\t     * @param {string} confirmationCode The MFA code entered by the user.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'sendMFACode',\n\t    value: function sendMFACode(confirmationCode, callback) {\n\t      var _this6 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\n\t      if (this.deviceKey != null) {\n\t        challengeResponses.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'SMS_MFA',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, dataAuthenticate) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = dataAuthenticate.ChallengeName;\n\t\n\t        if (challengeName === 'DEVICE_SRP_AUTH') {\n\t          _this6.getDeviceResponse(callback);\n\t          return undefined;\n\t        }\n\t\n\t        _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t        _this6.cacheTokens();\n\t\n\t        if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        }\n\t\n\t        var authenticationHelper = new _AuthenticationHelper2.default(_this6.pool.getUserPoolId().split('_')[1], _this6.pool.getParanoia());\n\t        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t        var deviceSecretVerifierConfig = {\n\t          Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t          PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t        };\n\t\n\t        _this6.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t        _this6.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t        _this6.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t        _this6.client.makeUnauthenticatedRequest('confirmDevice', {\n\t          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t          AccessToken: _this6.signInUserSession.getAccessToken().getJwtToken(),\n\t          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t          DeviceName: navigator.userAgent\n\t        }, function (errConfirm, dataConfirm) {\n\t          if (errConfirm) {\n\t            return callback.onFailure(errConfirm);\n\t          }\n\t\n\t          _this6.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t          _this6.cacheDeviceKeyAndPassword();\n\t          if (dataConfirm.UserConfirmationNecessary === true) {\n\t            return callback.onSuccess(_this6.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t          }\n\t          return callback.onSuccess(_this6.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to change the current password\r\n\t     * @param {string} oldUserPassword The current password.\r\n\t     * @param {string} newUserPassword The requested new password.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'changePassword',\n\t    value: function changePassword(oldUserPassword, newUserPassword, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('changePassword', {\n\t        PreviousPassword: oldUserPassword,\n\t        ProposedPassword: newUserPassword,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to enable MFA for himself\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'enableMFA',\n\t    value: function enableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t      var mfaEnabled = {\n\t        DeliveryMedium: 'SMS',\n\t        AttributeName: 'phone_number'\n\t      };\n\t      mfaOptions.push(mfaEnabled);\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to disable MFA for himself\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'disableMFA',\n\t    value: function disableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to delete himself\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteUser',\n\t    value: function deleteUser(callback) {\n\t      var _this7 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        _this7.clearCachedTokens();\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\r\n\t     */\n\t    /**\r\n\t     * This is used by an authenticated user to change a list of attributes\r\n\t     * @param {AttributeArg[]} attributes A list of the new user attributes.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'updateAttributes',\n\t    value: function updateAttributes(attributes, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        UserAttributes: attributes\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to get a list of attributes\r\n\t     * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserAttributes',\n\t    value: function getUserAttributes(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var attributeList = [];\n\t\n\t        for (var i = 0; i < userData.UserAttributes.length; i++) {\n\t          var attribute = {\n\t            Name: userData.UserAttributes[i].Name,\n\t            Value: userData.UserAttributes[i].Value\n\t          };\n\t          var userAttribute = new _CognitoUserAttribute2.default(attribute);\n\t          attributeList.push(userAttribute);\n\t        }\n\t\n\t        return callback(null, attributeList);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to delete a list of attributes\r\n\t     * @param {string[]} attributeList Names of the attributes to delete.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteAttributes',\n\t    value: function deleteAttributes(attributeList, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n\t        UserAttributeNames: attributeList,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by a user to resend a confirmation code\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'resendConfirmationCode',\n\t    value: function resendConfirmationCode(callback) {\n\t      this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get a session, either from the session object\r\n\t     * or from  the local storage, or by using a refresh token\r\n\t     *\r\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getSession',\n\t    value: function getSession(callback) {\n\t      if (this.username == null) {\n\t        return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t      }\n\t\n\t      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t        return callback(null, this.signInUserSession);\n\t      }\n\t\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var idTokenKey = keyPrefix + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.refreshToken';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(idTokenKey)) {\n\t        var idToken = new _CognitoIdToken2.default({\n\t          IdToken: storage.getItem(idTokenKey)\n\t        });\n\t        var accessToken = new _CognitoAccessToken2.default({\n\t          AccessToken: storage.getItem(accessTokenKey)\n\t        });\n\t        var refreshToken = new _CognitoRefreshToken2.default({\n\t          RefreshToken: storage.getItem(refreshTokenKey)\n\t        });\n\t\n\t        var sessionData = {\n\t          IdToken: idToken,\n\t          AccessToken: accessToken,\n\t          RefreshToken: refreshToken\n\t        };\n\t        var cachedSession = new _CognitoUserSession2.default(sessionData);\n\t        if (cachedSession.isValid()) {\n\t          this.signInUserSession = cachedSession;\n\t          return callback(null, this.signInUserSession);\n\t        }\n\t\n\t        if (refreshToken.getToken() == null) {\n\t          return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t        }\n\t\n\t        this.refreshSession(refreshToken, callback);\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This uses the refreshToken to retrieve a new session\r\n\t     * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\r\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'refreshSession',\n\t    value: function refreshSession(refreshToken, callback) {\n\t      var _this8 = this;\n\t\n\t      var authParameters = {};\n\t      authParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(lastUserKey)) {\n\t        this.username = storage.getItem(lastUserKey);\n\t        var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        ClientId: this.pool.getClientId(),\n\t        AuthFlow: 'REFRESH_TOKEN_AUTH',\n\t        AuthParameters: authParameters\n\t      }, function (err, authResult) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        if (authResult) {\n\t          var authenticationResult = authResult.AuthenticationResult;\n\t          if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t            authenticationResult.RefreshToken = refreshToken.getToken();\n\t          }\n\t          _this8.signInUserSession = _this8.getCognitoUserSession(authenticationResult);\n\t          _this8.cacheTokens();\n\t          return callback(null, _this8.signInUserSession);\n\t        }\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to save the session tokens to local storage\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheTokens',\n\t    value: function cacheTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t      storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t      storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t      storage.setItem(lastUserKey, this.username);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to cache the device key and device group and device password\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheDeviceKeyAndPassword',\n\t    value: function cacheDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.setItem(deviceKeyKey, this.deviceKey);\n\t      storage.setItem(randomPasswordKey, this.randomPassword);\n\t      storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get current device key and device group and device password\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getCachedDeviceKeyAndPassword',\n\t    value: function getCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      if (storage.getItem(deviceKeyKey)) {\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        this.randomPassword = storage.getItem(randomPasswordKey);\n\t        this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * This is used to clear the device key info from local storage\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedDeviceKeyAndPassword',\n\t    value: function clearCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.removeItem(deviceKeyKey);\n\t      storage.removeItem(randomPasswordKey);\n\t      storage.removeItem(deviceGroupKeyKey);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to clear the session tokens from local storage\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedTokens',\n\t    value: function clearCachedTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      storage.removeItem(idTokenKey);\n\t      storage.removeItem(accessTokenKey);\n\t      storage.removeItem(refreshTokenKey);\n\t      storage.removeItem(lastUserKey);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to build a user session from tokens retrieved in the authentication result\r\n\t     * @param {object} authResult Successful auth response from server.\r\n\t     * @returns {CognitoUserSession} The new user session.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getCognitoUserSession',\n\t    value: function getCognitoUserSession(authResult) {\n\t      var idToken = new _CognitoIdToken2.default(authResult);\n\t      var accessToken = new _CognitoAccessToken2.default(authResult);\n\t      var refreshToken = new _CognitoRefreshToken2.default(authResult);\n\t\n\t      var sessionData = {\n\t        IdToken: idToken,\n\t        AccessToken: accessToken,\n\t        RefreshToken: refreshToken\n\t      };\n\t\n\t      return new _CognitoUserSession2.default(sessionData);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to initiate a forgot password request\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {inputVerificationCode?} callback.inputVerificationCode\r\n\t     *    Optional callback raised instead of onSuccess with response data.\r\n\t     * @param {onSuccess<void>?} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'forgotPassword',\n\t    value: function forgotPassword(callback) {\n\t      this.client.makeUnauthenticatedRequest('forgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        if (typeof callback.inputVerificationCode === 'function') {\n\t          return callback.inputVerificationCode(data);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to confirm a new password using a confirmationCode\r\n\t     * @param {string} confirmationCode Code entered by user.\r\n\t     * @param {string} newPassword Confirm new password.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<void>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmPassword',\n\t    value: function confirmPassword(confirmationCode, newPassword, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username,\n\t        ConfirmationCode: confirmationCode,\n\t        Password: newPassword\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to initiate an attribute confirmation request\r\n\t     * @param {string} attributeName User attribute that needs confirmation.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getAttributeVerificationCode',\n\t    value: function getAttributeVerificationCode(attributeName, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n\t        AttributeName: attributeName,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.inputVerificationCode(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to confirm an attribute using a confirmation code\r\n\t     * @param {string} attributeName Attribute being confirmed.\r\n\t     * @param {string} confirmationCode Code entered by user.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'verifyAttribute',\n\t    value: function verifyAttribute(attributeName, confirmationCode, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n\t        AttributeName: attributeName,\n\t        Code: confirmationCode,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get the device information using the current device key\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getDevice',\n\t    value: function getDevice(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to forget a specific device\r\n\t     * @param {string} deviceKey Device key.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetSpecificDevice',\n\t    value: function forgetSpecificDevice(deviceKey, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('forgetDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: deviceKey\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to forget the current device\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetDevice',\n\t    value: function forgetDevice(callback) {\n\t      var _this9 = this;\n\t\n\t      this.forgetSpecificDevice(this.deviceKey, {\n\t        onFailure: callback.onFailure,\n\t        onSuccess: function onSuccess(result) {\n\t          _this9.deviceKey = null;\n\t          _this9.deviceGroupKey = null;\n\t          _this9.randomPassword = null;\n\t          _this9.clearCachedDeviceKeyAndPassword();\n\t          return callback.onSuccess(result);\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to set the device status as remembered\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusRemembered',\n\t    value: function setDeviceStatusRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to set the device status as not remembered\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusNotRemembered',\n\t    value: function setDeviceStatusNotRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'not_remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to list all devices for a user\r\n\t     *\r\n\t     * @param {int} limit the number of devices returned in a call\r\n\t     * @param {string} paginationToken the pagination token in case any was returned before\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'listDevices',\n\t    value: function listDevices(limit, paginationToken, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('listDevices', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        Limit: limit,\n\t        PaginationToken: paginationToken\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to globally revoke all tokens issued to a user\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'globalSignOut',\n\t    value: function globalSignOut(callback) {\n\t      var _this10 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback.onFailure(new Error('User is not authenticated'));\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('globalSignOut', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this10.clearCachedTokens();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used for the user to signOut of the application and clear the cached tokens.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'signOut',\n\t    value: function signOut() {\n\t      this.signInUserSession = null;\n\t      this.clearCachedTokens();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUser;\n\t}();\n\t\n\texports.default = CognitoUser;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserAttribute = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUserAttribute object\r\n\t   * @param {string=} Name The record's name\r\n\t   * @param {string=} Value The record's value\r\n\t   */\n\t  function CognitoUserAttribute() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        Name = _ref.Name,\n\t        Value = _ref.Value;\n\t\n\t    _classCallCheck(this, CognitoUserAttribute);\n\t\n\t    this.Name = Name || '';\n\t    this.Value = Value || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's value.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserAttribute, [{\n\t    key: 'getValue',\n\t    value: function getValue() {\n\t      return this.Value;\n\t    }\n\t\n\t    /**\r\n\t     * Sets the record's value.\r\n\t     * @param {string} value The new value.\r\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setValue',\n\t    value: function setValue(value) {\n\t      this.Value = value;\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the record's name.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getName',\n\t    value: function getName() {\n\t      return this.Name;\n\t    }\n\t\n\t    /**\r\n\t     * Sets the record's name\r\n\t     * @param {string} name The new name.\r\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setName',\n\t    value: function setName(name) {\n\t      this.Name = name;\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} a string representation of the record.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return JSON.stringify(this);\n\t    }\n\t\n\t    /**\r\n\t     * @returns {object} a flat object representing the record.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'toJSON',\n\t    value: function toJSON() {\n\t      return {\n\t        Name: this.Name,\n\t        Value: this.Value\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserAttribute;\n\t}();\n\t\n\texports.default = CognitoUserAttribute;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserSession = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUserSession object\r\n\t   * @param {string} IdToken The session's Id token.\r\n\t   * @param {string=} RefreshToken The session's refresh token.\r\n\t   * @param {string} AccessToken The session's access token.\r\n\t   */\n\t  function CognitoUserSession() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken,\n\t        RefreshToken = _ref.RefreshToken,\n\t        AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoUserSession);\n\t\n\t    if (AccessToken == null || IdToken == null) {\n\t      throw new Error('Id token and Access Token must be present.');\n\t    }\n\t\n\t    this.idToken = IdToken;\n\t    this.refreshToken = RefreshToken;\n\t    this.accessToken = AccessToken;\n\t  }\n\t\n\t  /**\r\n\t   * @returns {CognitoIdToken} the session's Id token\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserSession, [{\n\t    key: 'getIdToken',\n\t    value: function getIdToken() {\n\t      return this.idToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {CognitoRefreshToken} the session's refresh token\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getRefreshToken',\n\t    value: function getRefreshToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {CognitoAccessToken} the session's access token\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getAccessToken',\n\t    value: function getAccessToken() {\n\t      return this.accessToken;\n\t    }\n\t\n\t    /**\r\n\t     * Checks to see if the session is still valid based on session expiry information found\r\n\t     * in tokens and the current time\r\n\t     * @returns {boolean} if the session is still valid\r\n\t     */\n\t\n\t  }, {\n\t    key: 'isValid',\n\t    value: function isValid() {\n\t      var now = Math.floor(new Date() / 1000);\n\t\n\t      return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserSession;\n\t}();\n\t\n\texports.default = CognitoUserSession;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t    function DateHelper() {\n\t        _classCallCheck(this, DateHelper);\n\t    }\n\t\n\t    _createClass(DateHelper, [{\n\t        key: 'getNowString',\n\t\n\t        /**\r\n\t         * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\r\n\t         */\n\t        value: function getNowString() {\n\t            var now = new Date();\n\t\n\t            var weekDay = weekNames[now.getUTCDay()];\n\t            var month = monthNames[now.getUTCMonth()];\n\t            var day = now.getUTCDate();\n\t\n\t            var hours = now.getUTCHours();\n\t            if (hours < 10) {\n\t                hours = '0' + hours;\n\t            }\n\t\n\t            var minutes = now.getUTCMinutes();\n\t            if (minutes < 10) {\n\t                minutes = '0' + minutes;\n\t            }\n\t\n\t            var seconds = now.getUTCSeconds();\n\t            if (seconds < 10) {\n\t                seconds = '0' + seconds;\n\t            }\n\t\n\t            var year = now.getUTCFullYear();\n\t\n\t            // ddd MMM D HH:mm:ss UTC YYYY\n\t            var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t            return dateNow;\n\t        }\n\t    }]);\n\t\n\t    return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\tvar _data = {};\n\tvar _storage = window.localStorage;\n\t\n\t/** @class */\n\t\n\tvar MemoryStorage = function () {\n\t  function MemoryStorage() {\n\t    _classCallCheck(this, MemoryStorage);\n\t  }\n\t\n\t  _createClass(MemoryStorage, null, [{\n\t    key: 'setItem',\n\t    value: function setItem(key, value) {\n\t      return _data[key] = value;\n\t    }\n\t  }, {\n\t    key: 'getItem',\n\t    value: function getItem(key) {\n\t      return _data.hasOwnProperty(key) ? _data[key] : undefined;\n\t    }\n\t  }, {\n\t    key: 'removeItem',\n\t    value: function removeItem(key) {\n\t      return delete _data[key];\n\t    }\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      return _data = {};\n\t    }\n\t  }]);\n\t\n\t  return MemoryStorage;\n\t}();\n\t\n\t/** @class */\n\t\n\t\n\tvar StorageHelper = function () {\n\t  function StorageHelper() {\n\t    _classCallCheck(this, StorageHelper);\n\t\n\t    try {\n\t      _storage.setItem('aws.cognito.test-ls', 1);\n\t      _storage.removeItem('aws.cognito.test-ls');\n\t    } catch (exception) {\n\t      _storage = MemoryStorage;\n\t    }\n\t  }\n\t\n\t  _createClass(StorageHelper, [{\n\t    key: 'getStorage',\n\t    value: function getStorage() {\n\t      return _storage;\n\t    }\n\t  }]);\n\t\n\t  return StorageHelper;\n\t}();\n\t\n\texports.default = StorageHelper;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar AuthenticationDetails = function () {\n\t  /**\r\n\t   * Constructs a new AuthenticationDetails object\r\n\t   * @param {object=} data Creation options.\r\n\t   * @param {string} data.Username User being authenticated.\r\n\t   * @param {string} data.Password Plain-text password to authenticate with.\r\n\t   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\r\n\t   */\n\t  function AuthenticationDetails(data) {\n\t    _classCallCheck(this, AuthenticationDetails);\n\t\n\t    var _ref = data || {},\n\t        ValidationData = _ref.ValidationData,\n\t        Username = _ref.Username,\n\t        Password = _ref.Password;\n\t\n\t    this.validationData = ValidationData || [];\n\t    this.username = Username;\n\t    this.password = Password;\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's username\r\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationDetails, [{\n\t    key: \"getUsername\",\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the record's password\r\n\t     */\n\t\n\t  }, {\n\t    key: \"getPassword\",\n\t    value: function getPassword() {\n\t      return this.password;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {Array} the record's validationData\r\n\t     */\n\t\n\t  }, {\n\t    key: \"getValidationData\",\n\t    value: function getValidationData() {\n\t      return this.validationData;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationDetails;\n\t}();\n\t\n\texports.default = AuthenticationDetails;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Inc. or its affiliates. All Rights Reserved.\r\n\tr\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(11);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tvar _CognitoUser2 = _interopRequireDefault(_CognitoUser);\n\t\n\tvar _StorageHelper = __webpack_require__(10);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoUserPool = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUserPool object\r\n\t   * @param {object} data Creation options.\r\n\t   * @param {string} data.UserPoolId Cognito user pool id.\r\n\t   * @param {string} data.ClientId User pool application client id.\r\n\t   * @param {int=} data.Paranoia Random number generation paranoia level.\r\n\t   */\n\t  function CognitoUserPool(data) {\n\t    _classCallCheck(this, CognitoUserPool);\n\t\n\t    var _ref = data || {},\n\t        UserPoolId = _ref.UserPoolId,\n\t        ClientId = _ref.ClientId,\n\t        Paranoia = _ref.Paranoia;\n\t\n\t    if (!UserPoolId || !ClientId) {\n\t      throw new Error('Both UserPoolId and ClientId are required.');\n\t    }\n\t    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n\t      throw new Error('Invalid UserPoolId format.');\n\t    }\n\t    var region = UserPoolId.split('_')[0];\n\t\n\t    this.userPoolId = UserPoolId;\n\t    this.clientId = ClientId;\n\t    this.paranoia = Paranoia || 0;\n\t\n\t    this.client = new _cognitoidentityserviceprovider2.default({ apiVersion: '2016-04-19', region: region });\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the user pool id\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserPool, [{\n\t    key: 'getUserPoolId',\n\t    value: function getUserPoolId() {\n\t      return this.userPoolId;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the client id\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getClientId',\n\t    value: function getClientId() {\n\t      return this.clientId;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {int} the paranoia level\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getParanoia',\n\t    value: function getParanoia() {\n\t      return this.paranoia;\n\t    }\n\t\n\t    /**\r\n\t     * sets paranoia level\r\n\t     * @param {int} paranoia The new paranoia level.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setParanoia',\n\t    value: function setParanoia(paranoia) {\n\t      this.paranoia = paranoia;\n\t    }\n\t\n\t    /**\r\n\t     * @typedef {object} SignUpResult\r\n\t     * @property {CognitoUser} user New user.\r\n\t     * @property {bool} userConfirmed If the user is already confirmed.\r\n\t     */\n\t    /**\r\n\t     * method for signing up a user\r\n\t     * @param {string} username User's username.\r\n\t     * @param {string} password Plain-text initial password entered by user.\r\n\t     * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n\t     * @param {(AttributeArg[])=} validationData Application metadata.\r\n\t     * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'signUp',\n\t    value: function signUp(username, password, userAttributes, validationData, callback) {\n\t      var _this = this;\n\t\n\t      this.client.makeUnauthenticatedRequest('signUp', {\n\t        ClientId: this.clientId,\n\t        Username: username,\n\t        Password: password,\n\t        UserAttributes: userAttributes,\n\t        ValidationData: validationData\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var cognitoUser = {\n\t          Username: username,\n\t          Pool: _this\n\t        };\n\t\n\t        var returnData = {\n\t          user: new _CognitoUser2.default(cognitoUser),\n\t          userConfirmed: data.UserConfirmed\n\t        };\n\t\n\t        return callback(null, returnData);\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * method for getting the current user of the application from the local storage\r\n\t     *\r\n\t     * @returns {CognitoUser} the user retrieved from storage\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getCurrentUser',\n\t    value: function getCurrentUser() {\n\t      var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t      var storage = new _StorageHelper2.default().getStorage();\n\t\n\t      var lastAuthUser = storage.getItem(lastUserKey);\n\t      if (lastAuthUser) {\n\t        var cognitoUser = {\n\t          Username: lastAuthUser,\n\t          Pool: this\n\t        };\n\t\n\t        return new _CognitoUser2.default(cognitoUser);\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserPool;\n\t}();\n\t\n\texports.default = CognitoUserPool;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _AuthenticationDetails = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'AuthenticationDetails', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationDetails).default;\n\t  }\n\t});\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'AuthenticationHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationHelper).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'CognitoUser', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUser).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'CognitoUserAttribute', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserAttribute).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserPool = __webpack_require__(14);\n\t\n\tObject.defineProperty(exports, 'CognitoUserPool', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserPool).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'CognitoUserSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// amazon-cognito-identity.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 024200bbc98ba07e865e","import CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\r\nimport * as enhancements from './src';\r\n\r\nexport * from './src';\r\n\r\nObject.keys(enhancements).forEach(key => {\r\n  CognitoIdentityServiceProvider[key] = enhancements[key];\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/enhance.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sjcl\"\n// module id = 1\n// module chunks = 0","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\nimport { BigInteger } from 'jsbn';\r\n\r\nconst initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1'\r\n  + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD'\r\n  + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245'\r\n  + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED'\r\n  + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D'\r\n  + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F'\r\n  + '83655D23DCA3AD961C62F356208552BB9ED529077096966D'\r\n  + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B'\r\n  + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9'\r\n  + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510'\r\n  + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64'\r\n  + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7'\r\n  + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B'\r\n  + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C'\r\n  + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31'\r\n  + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\r\n\r\nconst newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\r\n\r\n/** @class */\r\nexport default class AuthenticationHelper {\r\n  /**\r\n   * Constructs a new AuthenticationHelper object\r\n   * @param {string} PoolName Cognito user pool name.\r\n   * @param {int} paranoia Random number generation paranoia level.\r\n   */\r\n  constructor(PoolName, paranoia) {\r\n    this.N = new BigInteger(initN, 16);\r\n    this.g = new BigInteger('2');\r\n    this.k = new BigInteger(this.hexHash(`00${this.N.toString(16)}0${this.g.toString(16)}`), 16);\r\n\r\n    this.paranoia = paranoia;\r\n\r\n    this.smallAValue = this.generateRandomSmallA();\r\n    this.largeAValue = this.calculateA(this.smallAValue);\r\n\r\n    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\r\n\r\n    this.poolName = PoolName;\r\n  }\r\n\r\n  /**\r\n   * @returns {BigInteger} small A, a random number\r\n   */\r\n  getSmallAValue() {\r\n    return this.smallAValue;\r\n  }\r\n\r\n  /**\r\n   * @returns {BigInteger} large A, a value generated from small A\r\n   */\r\n  getLargeAValue() {\r\n    return this.largeAValue;\r\n  }\r\n\r\n  /**\r\n   * helper function to generate a random big integer\r\n   * @returns {BigInteger} a random value.\r\n   * @private\r\n   */\r\n  generateRandomSmallA() {\r\n    const words = sjcl.random.randomWords(32, this.paranoia);\r\n    const hexRandom = sjcl.codec.hex.fromBits(words);\r\n\r\n    const randomBigInt = new BigInteger(hexRandom, 16);\r\n    const smallABigInt = randomBigInt.mod(this.N);\r\n\r\n    return smallABigInt;\r\n  }\r\n\r\n  /**\r\n   * helper function to generate a random string\r\n   * @returns {string} a random value.\r\n   * @private\r\n   */\r\n  generateRandomString() {\r\n    const words = sjcl.random.randomWords(10, this.paranoia);\r\n    const stringRandom = sjcl.codec.base64.fromBits(words);\r\n\r\n    return stringRandom;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Generated random value included in password hash.\r\n   */\r\n  getRandomPassword() {\r\n    return this.randomPassword;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Generated random value included in devices hash.\r\n   */\r\n  getSaltDevices() {\r\n    return this.SaltToHashDevices;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Value used to verify devices.\r\n   */\r\n  getVerifierDevices() {\r\n    return this.verifierDevices;\r\n  }\r\n\r\n  /**\r\n   * Generate salts and compute verifier.\r\n   * @param {string} deviceGroupKey Devices to generate verifier for.\r\n   * @param {string} username User to generate verifier for.\r\n   * @returns {void}\r\n   */\r\n  generateHashDevice(deviceGroupKey, username) {\r\n    this.randomPassword = this.generateRandomString();\r\n    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\r\n    const hashedString = this.hash(combinedString);\r\n\r\n    const words = sjcl.random.randomWords(4, this.paranoia);\r\n    const hexRandom = sjcl.codec.hex.fromBits(words);\r\n    const saltDevices = new BigInteger(hexRandom, 16);\r\n    const firstCharSalt = saltDevices.toString(16)[0];\r\n    this.SaltToHashDevices = saltDevices.toString(16);\r\n\r\n    if (saltDevices.toString(16).length % 2 === 1) {\r\n      this.SaltToHashDevices = `0${this.SaltToHashDevices}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\r\n      this.SaltToHashDevices = `00${this.SaltToHashDevices}`;\r\n    }\r\n    const verifierDevicesNotPadded = this.g.modPow(\r\n      new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16),\r\n      this.N);\r\n\r\n    const firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\r\n    this.verifierDevices = verifierDevicesNotPadded.toString(16);\r\n\r\n    if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\r\n      this.verifierDevices = `0${this.verifierDevices}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\r\n      this.verifierDevices = `00${this.verifierDevices}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the client's public value A = g^a%N\r\n   * with the generated random number a\r\n   * @param {BigInteger} a Randomly generated small A.\r\n   * @returns {BigInteger} Computed large A.\r\n   * @private\r\n   */\r\n  calculateA(a) {\r\n    const A = this.g.modPow(a, this.N);\r\n\r\n    if (A.mod(this.N).toString() === '0') {\r\n      throw new Error('Illegal paramater. A mod N cannot be 0.');\r\n    }\r\n    return A;\r\n  }\r\n\r\n  /**\r\n   * Calculate the client's value U which is the hash of A and B\r\n   * @param {BigInteger} A Large A value.\r\n   * @param {BigInteger} B Server B value.\r\n   * @returns {BigInteger} Computed U value.\r\n   * @private\r\n   */\r\n  calculateU(A, B) {\r\n    const firstCharA = A.toString(16)[0];\r\n    const firstCharB = B.toString(16)[0];\r\n    let AToHash = A.toString(16);\r\n    let BToHash = B.toString(16);\r\n\r\n    if (A.toString(16).length % 2 === 1) {\r\n      AToHash = `0${AToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\r\n      AToHash = `00${AToHash}`;\r\n    }\r\n\r\n    if (B.toString(16).length % 2 === 1) {\r\n      BToHash = `0${BToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\r\n      BToHash = `00${BToHash}`;\r\n    }\r\n\r\n    this.UHexHash = this.hexHash(AToHash + BToHash);\r\n    const finalU = new BigInteger(this.UHexHash, 16);\r\n\r\n    return finalU;\r\n  }\r\n\r\n  /**\r\n   * Calculate a hash from a bitArray\r\n   * @param {sjcl.bitArray} bitArray Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */\r\n  hash(bitArray) {\r\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\r\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\r\n  }\r\n\r\n  /**\r\n   * Calculate a hash from a hex string\r\n   * @param {String} hexStr Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */\r\n  hexHash(hexStr) {\r\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\r\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\r\n  }\r\n\r\n  /**\r\n   * Standard hkdf algorithm\r\n   * @param {sjcl.bitArray} ikm Input key material.\r\n   * @param {sjcl.bitArray} salt Salt value.\r\n   * @returns {sjcl.bitArray} Strong key material.\r\n   * @private\r\n   */\r\n  computehkdf(ikm, salt) {\r\n    const mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\r\n    mac.update(ikm);\r\n    const prk = mac.digest();\r\n    const hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\r\n    const infoBitsUpdate = sjcl.bitArray.concat(\r\n      this.infoBits,\r\n      sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\r\n    hmac.update(infoBitsUpdate);\r\n\r\n    return sjcl.bitArray.clamp(hmac.digest(), 128);\r\n  }\r\n\r\n  /**\r\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\r\n   * @param {String} username Username.\r\n   * @param {String} password Password.\r\n   * @param {BigInteger} serverBValue Server B value.\r\n   * @param {BigInteger} salt Generated salt.\r\n   * @returns {sjcl.bitArray} Computed HKDF value.\r\n   */\r\n  getPasswordAuthenticationKey(username, password, serverBValue, salt) {\r\n    if (serverBValue.mod(this.N).equals(new BigInteger('0', 16))) {\r\n      throw new Error('B cannot be zero.');\r\n    }\r\n\r\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\r\n\r\n    if (this.UValue.equals(new BigInteger('0', 16))) {\r\n      throw new Error('U cannot be zero.');\r\n    }\r\n\r\n    const usernamePassword = `${this.poolName}${username}:${password}`;\r\n    const usernamePasswordHash = this.hash(usernamePassword);\r\n\r\n    const firstCharSalt = salt.toString(16)[0];\r\n    let SaltToHash = salt.toString(16);\r\n\r\n    if (salt.toString(16).length % 2 === 1) {\r\n      SaltToHash = `0${SaltToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\r\n      SaltToHash = `00${SaltToHash}`;\r\n    }\r\n\r\n    const xValue = new BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\r\n\r\n    const gModPowXN = this.g.modPow(xValue, this.N);\r\n    const intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\r\n    const sValue = intValue2.modPow(\r\n      this.smallAValue.add(this.UValue.multiply(xValue)),\r\n      this.N\r\n    ).mod(this.N);\r\n\r\n    let SToHash = sValue.toString(16);\r\n    const firstCharS = sValue.toString(16)[0];\r\n\r\n    if (sValue.toString(16).length % 2 === 1) {\r\n      SToHash = `0${SToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\r\n      SToHash = `00${SToHash}`;\r\n    }\r\n\r\n    let UValueToHash = this.UHexHash;\r\n    const firstCharU = this.UHexHash[0];\r\n\r\n    if (this.UHexHash.length % 2 === 1) {\r\n      UValueToHash = `0${UValueToHash}`;\r\n    } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\r\n      UValueToHash = `00${UValueToHash}`;\r\n    }\r\n\r\n    const hkdf = this.computehkdf(\r\n      sjcl.codec.hex.toBits(SToHash),\r\n      sjcl.codec.hex.toBits(UValueToHash));\r\n\r\n    return hkdf;\r\n  }\r\n\r\n  /**\r\n  * Return constant newPasswordRequiredChallengeUserAttributePrefix\r\n  * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\r\n  */\r\n  getNewPasswordRequiredChallengeUserAttributePrefix() {\r\n    return newPasswordRequiredChallengeUserAttributePrefix;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/AuthenticationHelper.js","/*\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\n\r\n/** @class */\r\nexport default class CognitoAccessToken {\r\n  /**\r\n   * Constructs a new CognitoAccessToken object\r\n   * @param {string=} AccessToken The JWT access token.\r\n   */\r\n  constructor({ AccessToken } = {}) {\r\n    // Assign object\r\n    this.jwtToken = AccessToken || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's token.\r\n   */\r\n  getJwtToken() {\r\n    return this.jwtToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the token's expiration (exp member).\r\n   */\r\n  getExpiration() {\r\n    const payload = this.jwtToken.split('.')[1];\r\n    const expiration = JSON.parse(\r\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\r\n    return expiration.exp;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/CognitoAccessToken.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\n\r\n/** @class */\r\nexport default class CognitoIdToken {\r\n  /**\r\n   * Constructs a new CognitoIdToken object\r\n   * @param {string=} IdToken The JWT Id token\r\n   */\r\n  constructor({ IdToken } = {}) {\r\n    // Assign object\r\n    this.jwtToken = IdToken || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's token.\r\n   */\r\n  getJwtToken() {\r\n    return this.jwtToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the token's expiration (exp member).\r\n   */\r\n  getExpiration() {\r\n    const payload = this.jwtToken.split('.')[1];\r\n    const expiration = JSON.parse(\r\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\r\n    return expiration.exp;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/CognitoIdToken.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class CognitoRefreshToken {\r\n  /**\r\n   * Constructs a new CognitoRefreshToken object\r\n   * @param {string=} RefreshToken The JWT refresh token.\r\n   */\r\n  constructor({ RefreshToken } = {}) {\r\n    // Assign object\r\n    this.token = RefreshToken || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's token.\r\n   */\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/CognitoRefreshToken.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\nimport { BigInteger } from 'jsbn';\r\n\r\nimport AuthenticationHelper from './AuthenticationHelper';\r\nimport CognitoAccessToken from './CognitoAccessToken';\r\nimport CognitoIdToken from './CognitoIdToken';\r\nimport CognitoRefreshToken from './CognitoRefreshToken';\r\nimport CognitoUserSession from './CognitoUserSession';\r\nimport DateHelper from './DateHelper';\r\nimport CognitoUserAttribute from './CognitoUserAttribute';\r\nimport StorageHelper from './StorageHelper';\r\n\r\n/**\r\n * @callback nodeCallback\r\n * @template T result\r\n * @param {*} err The operation failure reason, or null.\r\n * @param {T} result The operation result.\r\n */\r\n\r\n/**\r\n * @callback onFailure\r\n * @param {*} err Failure reason.\r\n */\r\n\r\n/**\r\n * @callback onSuccess\r\n * @template T result\r\n * @param {T} result The operation result.\r\n */\r\n\r\n/**\r\n * @callback mfaRequired\r\n * @param {*} details MFA challenge details.\r\n */\r\n\r\n/**\r\n * @callback customChallenge\r\n * @param {*} details Custom challenge details.\r\n */\r\n\r\n/**\r\n * @callback inputVerificationCode\r\n * @param {*} data Server response.\r\n */\r\n\r\n/**\r\n * @callback authSuccess\r\n * @param {CognitoUserSession} session The new session.\r\n * @param {bool=} userConfirmationNecessary User must be confirmed.\r\n */\r\n\r\n\r\n/** @class */\r\nexport default class CognitoUser {\r\n  /**\r\n   * Constructs a new CognitoUser object\r\n   * @param {object} data Creation options\r\n   * @param {string} data.Username The user's username.\r\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\r\n   */\r\n  constructor(data) {\r\n    if (data == null || data.Username == null || data.Pool == null) {\r\n      throw new Error('Username and pool information are required.');\r\n    }\r\n\r\n    this.username = data.Username || '';\r\n    this.pool = data.Pool;\r\n    this.Session = null;\r\n\r\n    this.client = data.Pool.client;\r\n\r\n    this.signInUserSession = null;\r\n    this.authenticationFlowType = 'USER_SRP_AUTH';\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoUserSession} the current session for this user\r\n   */\r\n  getSignInUserSession() {\r\n    return this.signInUserSession;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the user's username\r\n   */\r\n  getUsername() {\r\n    return this.username;\r\n  }\r\n\r\n  /**\r\n   * @returns {String} the authentication flow type\r\n   */\r\n  getAuthenticationFlowType() {\r\n    return this.authenticationFlowType;\r\n  }\r\n\r\n  /**\r\n   * sets authentication flow type\r\n   * @param {string} authenticationFlowType New value.\r\n   * @returns {void}\r\n   */\r\n  setAuthenticationFlowType(authenticationFlowType) {\r\n    this.authenticationFlowType = authenticationFlowType;\r\n  }\r\n\r\n  /**\r\n   * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\r\n   * stuff\r\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {newPasswordRequired} callback.newPasswordRequired new\r\n   *        password and any required attributes are required to continue\r\n   * @param {mfaRequired} callback.mfaRequired MFA code\r\n   *        required to continue.\r\n   * @param {customChallenge} callback.customChallenge Custom challenge\r\n   *        response required to continue.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   */\r\n  authenticateUser(authDetails, callback) {\r\n    const authenticationHelper = new AuthenticationHelper(\r\n      this.pool.getUserPoolId().split('_')[1],\r\n      this.pool.getParanoia());\r\n    const dateHelper = new DateHelper();\r\n\r\n    let serverBValue;\r\n    let salt;\r\n    const authParameters = {};\r\n\r\n    if (this.deviceKey != null) {\r\n      authParameters.DEVICE_KEY = this.deviceKey;\r\n    }\r\n\r\n    authParameters.USERNAME = this.username;\r\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\r\n\r\n    if (this.authenticationFlowType === 'CUSTOM_AUTH') {\r\n      authParameters.CHALLENGE_NAME = 'SRP_A';\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\r\n      AuthFlow: this.authenticationFlowType,\r\n      ClientId: this.pool.getClientId(),\r\n      AuthParameters: authParameters,\r\n      ClientMetadata: authDetails.getValidationData(),\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      const challengeParameters = data.ChallengeParameters;\r\n\r\n      this.username = challengeParameters.USER_ID_FOR_SRP;\r\n      serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\r\n      salt = new BigInteger(challengeParameters.SALT, 16);\r\n      this.getCachedDeviceKeyAndPassword();\r\n\r\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\r\n        this.username,\r\n        authDetails.getPassword(),\r\n        serverBValue,\r\n        salt);\r\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\r\n\r\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\r\n      mac.update(sjcl.codec.utf8String.toBits(this.pool.getUserPoolId().split('_')[1]));\r\n      mac.update(sjcl.codec.utf8String.toBits(this.username));\r\n      mac.update(secretBlockBits);\r\n      const dateNow = dateHelper.getNowString();\r\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\r\n      const signature = mac.digest();\r\n      const signatureString = sjcl.codec.base64.fromBits(signature);\r\n\r\n      const challengeResponses = {};\r\n\r\n      challengeResponses.USERNAME = this.username;\r\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\r\n      challengeResponses.TIMESTAMP = dateNow;\r\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\r\n\r\n      if (this.deviceKey != null) {\r\n        challengeResponses.DEVICE_KEY = this.deviceKey;\r\n      }\r\n\r\n      const respondToAuthChallenge = (challenge, challengeCallback) =>\r\n        this.client.makeUnauthenticatedRequest('respondToAuthChallenge', challenge,\r\n          (errChallenge, dataChallenge) => {\r\n            if (errChallenge && errChallenge.code === 'ResourceNotFoundException' &&\r\n                errChallenge.message.toLowerCase().indexOf('device') !== -1) {\r\n              challengeResponses.DEVICE_KEY = null;\r\n              this.deviceKey = null;\r\n              this.randomPassword = null;\r\n              this.deviceGroupKey = null;\r\n              this.clearCachedDeviceKeyAndPassword();\r\n              return respondToAuthChallenge(challenge, challengeCallback);\r\n            }\r\n            return challengeCallback(errChallenge, dataChallenge);\r\n          });\r\n\r\n      respondToAuthChallenge({\r\n        ChallengeName: 'PASSWORD_VERIFIER',\r\n        ClientId: this.pool.getClientId(),\r\n        ChallengeResponses: challengeResponses,\r\n        Session: data.Session,\r\n      }, (errAuthenticate, dataAuthenticate) => {\r\n        if (errAuthenticate) {\r\n          return callback.onFailure(errAuthenticate);\r\n        }\r\n\r\n        const challengeName = dataAuthenticate.ChallengeName;\r\n        if (challengeName === 'NEW_PASSWORD_REQUIRED') {\r\n          this.Session = dataAuthenticate.Session;\r\n          let userAttributes = null;\r\n          let rawRequiredAttributes = null;\r\n          const requiredAttributes = [];\r\n          const userAttributesPrefix = authenticationHelper\r\n            .getNewPasswordRequiredChallengeUserAttributePrefix();\r\n\r\n          if (dataAuthenticate.ChallengeParameters) {\r\n            userAttributes = JSON.parse(\r\n              dataAuthenticate.ChallengeParameters.userAttributes);\r\n            rawRequiredAttributes = JSON.parse(\r\n              dataAuthenticate.ChallengeParameters.requiredAttributes);\r\n          }\r\n\r\n          if (rawRequiredAttributes) {\r\n            for (let i = 0; i < rawRequiredAttributes.length; i++) {\r\n              requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\r\n            }\r\n          }\r\n          return callback.newPasswordRequired(userAttributes, requiredAttributes);\r\n        }\r\n        return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\r\n      });\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n  * PRIVATE ONLY: This is an internal only method and should not\r\n  * be directly called by the consumers.\r\n  * @param {object} dataAuthenticate authentication data\r\n  * @param {object} authenticationHelper helper created\r\n  * @param {callback} callback passed on from caller\r\n  * @returns {void}\r\n  */\r\n  authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\r\n    const challengeName = dataAuthenticate.ChallengeName;\r\n    if (challengeName === 'SMS_MFA') {\r\n      this.Session = dataAuthenticate.Session;\r\n      return callback.mfaRequired(challengeName);\r\n    }\r\n\r\n    if (challengeName === 'CUSTOM_CHALLENGE') {\r\n      this.Session = dataAuthenticate.Session;\r\n      return callback.customChallenge(dataAuthenticate.ChallengeParameters);\r\n    }\r\n\r\n    if (challengeName === 'DEVICE_SRP_AUTH') {\r\n      this.getDeviceResponse(callback);\r\n      return undefined;\r\n    }\r\n\r\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\r\n    this.cacheTokens();\r\n\r\n    const newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\r\n    if (newDeviceMetadata == null) {\r\n      return callback.onSuccess(this.signInUserSession);\r\n    }\r\n\r\n    authenticationHelper.generateHashDevice(\r\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\r\n      dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\r\n\r\n    const deviceSecretVerifierConfig = {\r\n      Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n              authenticationHelper.getSaltDevices().toString(16))),\r\n      PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n              authenticationHelper.getVerifierDevices().toString(16))),\r\n    };\r\n\r\n    this.verifierDevices = sjcl.codec.base64.fromBits(\r\n      authenticationHelper.getVerifierDevices());\r\n    this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\r\n    this.randomPassword = authenticationHelper.getRandomPassword();\r\n\r\n    this.client.makeUnauthenticatedRequest('confirmDevice', {\r\n      DeviceKey: newDeviceMetadata.DeviceKey,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\r\n      DeviceName: navigator.userAgent,\r\n    }, (errConfirm, dataConfirm) => {\r\n      if (errConfirm) {\r\n        return callback.onFailure(errConfirm);\r\n      }\r\n\r\n      this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\r\n      this.cacheDeviceKeyAndPassword();\r\n      if (dataConfirm.UserConfirmationNecessary === true) {\r\n        return callback.onSuccess(\r\n          this.signInUserSession, dataConfirm.UserConfirmationNecessary);\r\n      }\r\n      return callback.onSuccess(this.signInUserSession);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\r\n  * Pass the new password with any new user attributes to be updated.\r\n  * User attribute keys must be of format userAttributes.<attribute_name>.\r\n  * @param {string} newPassword new password for this user\r\n  * @param {object} requiredAttributeData map with values for all required attributes\r\n  * @param {object} callback Result callback map.\r\n  * @param {onFailure} callback.onFailure Called on any error.\r\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\r\n  * @param {customChallenge} callback.customChallenge Custom challenge\r\n  *         response required to continue.\r\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n  * @returns {void}\r\n  */\r\n  completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\r\n    if (!newPassword) {\r\n      return callback.onFailure('New password is required.');\r\n    }\r\n    const authenticationHelper = new AuthenticationHelper(\r\n      this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\r\n    const userAttributesPrefix = authenticationHelper\r\n      .getNewPasswordRequiredChallengeUserAttributePrefix();\r\n\r\n    const finalUserAttributes = {};\r\n    if (requiredAttributeData) {\r\n      Object.keys(requiredAttributeData).forEach((key) => {\r\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\r\n      });\r\n    }\r\n\r\n    finalUserAttributes.NEW_PASSWORD = newPassword;\r\n    finalUserAttributes.USERNAME = this.username;\r\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\r\n      ClientId: this.pool.getClientId(),\r\n      ChallengeResponses: finalUserAttributes,\r\n      Session: this.Session,\r\n    }, (errAuthenticate, dataAuthenticate) => {\r\n      if (errAuthenticate) {\r\n        return callback.onFailure(errAuthenticate);\r\n      }\r\n      return this.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to get a session using device authentication. It is called at the end of user\r\n   * authentication\r\n   *\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   * @private\r\n   */\r\n  getDeviceResponse(callback) {\r\n    const authenticationHelper = new AuthenticationHelper(\r\n      this.deviceGroupKey,\r\n      this.pool.getParanoia());\r\n    const dateHelper = new DateHelper();\r\n\r\n    const authParameters = {};\r\n\r\n    authParameters.USERNAME = this.username;\r\n    authParameters.DEVICE_KEY = this.deviceKey;\r\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\r\n\r\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n      ChallengeName: 'DEVICE_SRP_AUTH',\r\n      ClientId: this.pool.getClientId(),\r\n      ChallengeResponses: authParameters,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      const challengeParameters = data.ChallengeParameters;\r\n\r\n      const serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\r\n      const salt = new BigInteger(challengeParameters.SALT, 16);\r\n\r\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\r\n        this.deviceKey,\r\n        this.randomPassword,\r\n        serverBValue,\r\n        salt);\r\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\r\n\r\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\r\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceGroupKey));\r\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceKey));\r\n      mac.update(secretBlockBits);\r\n      const dateNow = dateHelper.getNowString();\r\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\r\n      const signature = mac.digest();\r\n      const signatureString = sjcl.codec.base64.fromBits(signature);\r\n\r\n      const challengeResponses = {};\r\n\r\n      challengeResponses.USERNAME = this.username;\r\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\r\n      challengeResponses.TIMESTAMP = dateNow;\r\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\r\n      challengeResponses.DEVICE_KEY = this.deviceKey;\r\n\r\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\r\n        ClientId: this.pool.getClientId(),\r\n        ChallengeResponses: challengeResponses,\r\n        Session: data.Session,\r\n      }, (errAuthenticate, dataAuthenticate) => {\r\n        if (errAuthenticate) {\r\n          return callback.onFailure(errAuthenticate);\r\n        }\r\n\r\n        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\r\n        this.cacheTokens();\r\n\r\n        return callback.onSuccess(this.signInUserSession);\r\n      });\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used for a certain user to confirm the registration by using a confirmation code\r\n   * @param {string} confirmationCode Code entered by user.\r\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  confirmRegistration(confirmationCode, forceAliasCreation, callback) {\r\n    this.client.makeUnauthenticatedRequest('confirmSignUp', {\r\n      ClientId: this.pool.getClientId(),\r\n      ConfirmationCode: confirmationCode,\r\n      Username: this.username,\r\n      ForceAliasCreation: forceAliasCreation,\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used by the user once he has the responses to a custom challenge\r\n   * @param {string} answerChallenge The custom challange answer.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {customChallenge} callback.customChallenge\r\n   *    Custom challenge response required to continue.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   */\r\n  sendCustomChallengeAnswer(answerChallenge, callback) {\r\n    const challengeResponses = {};\r\n    challengeResponses.USERNAME = this.username;\r\n    challengeResponses.ANSWER = answerChallenge;\r\n\r\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n      ChallengeName: 'CUSTOM_CHALLENGE',\r\n      ChallengeResponses: challengeResponses,\r\n      ClientId: this.pool.getClientId(),\r\n      Session: this.Session,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      const challengeName = data.ChallengeName;\r\n\r\n      if (challengeName === 'CUSTOM_CHALLENGE') {\r\n        this.Session = data.Session;\r\n        return callback.customChallenge(data.challengeParameters);\r\n      }\r\n\r\n      this.signInUserSession = this.getCognitoUserSession(data.AuthenticationResult);\r\n      this.cacheTokens();\r\n      return callback.onSuccess(this.signInUserSession);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used by the user once he has an MFA code\r\n   * @param {string} confirmationCode The MFA code entered by the user.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   */\r\n  sendMFACode(confirmationCode, callback) {\r\n    const challengeResponses = {};\r\n    challengeResponses.USERNAME = this.username;\r\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\r\n\r\n    if (this.deviceKey != null) {\r\n      challengeResponses.DEVICE_KEY = this.deviceKey;\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n      ChallengeName: 'SMS_MFA',\r\n      ChallengeResponses: challengeResponses,\r\n      ClientId: this.pool.getClientId(),\r\n      Session: this.Session,\r\n    }, (err, dataAuthenticate) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      const challengeName = dataAuthenticate.ChallengeName;\r\n\r\n      if (challengeName === 'DEVICE_SRP_AUTH') {\r\n        this.getDeviceResponse(callback);\r\n        return undefined;\r\n      }\r\n\r\n      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\r\n      this.cacheTokens();\r\n\r\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\r\n        return callback.onSuccess(this.signInUserSession);\r\n      }\r\n\r\n      const authenticationHelper = new AuthenticationHelper(\r\n        this.pool.getUserPoolId().split('_')[1],\r\n        this.pool.getParanoia());\r\n      authenticationHelper.generateHashDevice(\r\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\r\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\r\n\r\n      const deviceSecretVerifierConfig = {\r\n        Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n          authenticationHelper.getSaltDevices().toString(16))),\r\n        PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n          authenticationHelper.getVerifierDevices().toString(16))),\r\n      };\r\n\r\n      this.verifierDevices = sjcl.codec.base64.fromBits(\r\n        authenticationHelper.getVerifierDevices());\r\n      this.deviceGroupKey = dataAuthenticate.AuthenticationResult\r\n        .NewDeviceMetadata.DeviceGroupKey;\r\n      this.randomPassword = authenticationHelper.getRandomPassword();\r\n\r\n      this.client.makeUnauthenticatedRequest('confirmDevice', {\r\n        DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\r\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\r\n        DeviceName: navigator.userAgent,\r\n      }, (errConfirm, dataConfirm) => {\r\n        if (errConfirm) {\r\n          return callback.onFailure(errConfirm);\r\n        }\r\n\r\n        this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\r\n        this.cacheDeviceKeyAndPassword();\r\n        if (dataConfirm.UserConfirmationNecessary === true) {\r\n          return callback.onSuccess(\r\n            this.signInUserSession,\r\n            dataConfirm.UserConfirmationNecessary);\r\n        }\r\n        return callback.onSuccess(this.signInUserSession);\r\n      });\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to change the current password\r\n   * @param {string} oldUserPassword The current password.\r\n   * @param {string} newUserPassword The requested new password.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  changePassword(oldUserPassword, newUserPassword, callback) {\r\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('changePassword', {\r\n      PreviousPassword: oldUserPassword,\r\n      ProposedPassword: newUserPassword,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to enable MFA for himself\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  enableMFA(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    const mfaOptions = [];\r\n    const mfaEnabled = {\r\n      DeliveryMedium: 'SMS',\r\n      AttributeName: 'phone_number',\r\n    };\r\n    mfaOptions.push(mfaEnabled);\r\n\r\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\r\n      MFAOptions: mfaOptions,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to disable MFA for himself\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  disableMFA(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    const mfaOptions = [];\r\n\r\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\r\n      MFAOptions: mfaOptions,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n\r\n  /**\r\n   * This is used by an authenticated user to delete himself\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  deleteUser(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('deleteUser', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      this.clearCachedTokens();\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\r\n   */\r\n  /**\r\n   * This is used by an authenticated user to change a list of attributes\r\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  updateAttributes(attributes, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('updateUserAttributes', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      UserAttributes: attributes,\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to get a list of attributes\r\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  getUserAttributes(callback) {\r\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('getUser', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, (err, userData) => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n\r\n      const attributeList = [];\r\n\r\n      for (let i = 0; i < userData.UserAttributes.length; i++) {\r\n        const attribute = {\r\n          Name: userData.UserAttributes[i].Name,\r\n          Value: userData.UserAttributes[i].Value,\r\n        };\r\n        const userAttribute = new CognitoUserAttribute(attribute);\r\n        attributeList.push(userAttribute);\r\n      }\r\n\r\n      return callback(null, attributeList);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to delete a list of attributes\r\n   * @param {string[]} attributeList Names of the attributes to delete.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  deleteAttributes(attributeList, callback) {\r\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\r\n      UserAttributeNames: attributeList,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by a user to resend a confirmation code\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  resendConfirmationCode(callback) {\r\n    this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\r\n      ClientId: this.pool.getClientId(),\r\n      Username: this.username,\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to get a session, either from the session object\r\n   * or from  the local storage, or by using a refresh token\r\n   *\r\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  getSession(callback) {\r\n    if (this.username == null) {\r\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\r\n    }\r\n\r\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\r\n      return callback(null, this.signInUserSession);\r\n    }\r\n\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const idTokenKey = `${keyPrefix}.idToken`;\r\n    const accessTokenKey = `${keyPrefix}.accessToken`;\r\n    const refreshTokenKey = `${keyPrefix}.refreshToken`;\r\n\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    if (storage.getItem(idTokenKey)) {\r\n      const idToken = new CognitoIdToken({\r\n        IdToken: storage.getItem(idTokenKey),\r\n      });\r\n      const accessToken = new CognitoAccessToken({\r\n        AccessToken: storage.getItem(accessTokenKey),\r\n      });\r\n      const refreshToken = new CognitoRefreshToken({\r\n        RefreshToken: storage.getItem(refreshTokenKey),\r\n      });\r\n\r\n      const sessionData = {\r\n        IdToken: idToken,\r\n        AccessToken: accessToken,\r\n        RefreshToken: refreshToken,\r\n      };\r\n      const cachedSession = new CognitoUserSession(sessionData);\r\n      if (cachedSession.isValid()) {\r\n        this.signInUserSession = cachedSession;\r\n        return callback(null, this.signInUserSession);\r\n      }\r\n\r\n      if (refreshToken.getToken() == null) {\r\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\r\n      }\r\n\r\n      this.refreshSession(refreshToken, callback);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  /**\r\n   * This uses the refreshToken to retrieve a new session\r\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\r\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  refreshSession(refreshToken, callback) {\r\n    const authParameters = {};\r\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\r\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    if (storage.getItem(lastUserKey)) {\r\n      this.username = storage.getItem(lastUserKey);\r\n      const deviceKeyKey = `${keyPrefix}.${this.username}.deviceKey`;\r\n      this.deviceKey = storage.getItem(deviceKeyKey);\r\n      authParameters.DEVICE_KEY = this.deviceKey;\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\r\n      ClientId: this.pool.getClientId(),\r\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\r\n      AuthParameters: authParameters,\r\n    }, (err, authResult) => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      if (authResult) {\r\n        const authenticationResult = authResult.AuthenticationResult;\r\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\r\n          authenticationResult.RefreshToken = refreshToken.getToken();\r\n        }\r\n        this.signInUserSession = this.getCognitoUserSession(authenticationResult);\r\n        this.cacheTokens();\r\n        return callback(null, this.signInUserSession);\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to save the session tokens to local storage\r\n   * @returns {void}\r\n   */\r\n  cacheTokens() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\r\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\r\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\r\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\r\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\r\n\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\r\n    storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\r\n    storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\r\n    storage.setItem(lastUserKey, this.username);\r\n  }\r\n\r\n  /**\r\n   * This is used to cache the device key and device group and device password\r\n   * @returns {void}\r\n   */\r\n  cacheDeviceKeyAndPassword() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\r\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\r\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\r\n\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    storage.setItem(deviceKeyKey, this.deviceKey);\r\n    storage.setItem(randomPasswordKey, this.randomPassword);\r\n    storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\r\n  }\r\n\r\n  /**\r\n   * This is used to get current device key and device group and device password\r\n   * @returns {void}\r\n   */\r\n  getCachedDeviceKeyAndPassword() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\r\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\r\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\r\n\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    if (storage.getItem(deviceKeyKey)) {\r\n      this.deviceKey = storage.getItem(deviceKeyKey);\r\n      this.randomPassword = storage.getItem(randomPasswordKey);\r\n      this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is used to clear the device key info from local storage\r\n   * @returns {void}\r\n   */\r\n  clearCachedDeviceKeyAndPassword() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\r\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\r\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\r\n\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    storage.removeItem(deviceKeyKey);\r\n    storage.removeItem(randomPasswordKey);\r\n    storage.removeItem(deviceGroupKeyKey);\r\n  }\r\n\r\n  /**\r\n   * This is used to clear the session tokens from local storage\r\n   * @returns {void}\r\n   */\r\n  clearCachedTokens() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\r\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\r\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\r\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\r\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\r\n\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    storage.removeItem(idTokenKey);\r\n    storage.removeItem(accessTokenKey);\r\n    storage.removeItem(refreshTokenKey);\r\n    storage.removeItem(lastUserKey);\r\n  }\r\n\r\n  /**\r\n   * This is used to build a user session from tokens retrieved in the authentication result\r\n   * @param {object} authResult Successful auth response from server.\r\n   * @returns {CognitoUserSession} The new user session.\r\n   * @private\r\n   */\r\n  getCognitoUserSession(authResult) {\r\n    const idToken = new CognitoIdToken(authResult);\r\n    const accessToken = new CognitoAccessToken(authResult);\r\n    const refreshToken = new CognitoRefreshToken(authResult);\r\n\r\n    const sessionData = {\r\n      IdToken: idToken,\r\n      AccessToken: accessToken,\r\n      RefreshToken: refreshToken,\r\n    };\r\n\r\n    return new CognitoUserSession(sessionData);\r\n  }\r\n\r\n  /**\r\n   * This is used to initiate a forgot password request\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {inputVerificationCode?} callback.inputVerificationCode\r\n   *    Optional callback raised instead of onSuccess with response data.\r\n   * @param {onSuccess<void>?} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  forgotPassword(callback) {\r\n    this.client.makeUnauthenticatedRequest('forgotPassword', {\r\n      ClientId: this.pool.getClientId(),\r\n      Username: this.username,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      if (typeof callback.inputVerificationCode === 'function') {\r\n        return callback.inputVerificationCode(data);\r\n      }\r\n      return callback.onSuccess();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to confirm a new password using a confirmationCode\r\n   * @param {string} confirmationCode Code entered by user.\r\n   * @param {string} newPassword Confirm new password.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  confirmPassword(confirmationCode, newPassword, callback) {\r\n    this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\r\n      ClientId: this.pool.getClientId(),\r\n      Username: this.username,\r\n      ConfirmationCode: confirmationCode,\r\n      Password: newPassword,\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to initiate an attribute confirmation request\r\n   * @param {string} attributeName User attribute that needs confirmation.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\r\n   * @returns {void}\r\n   */\r\n  getAttributeVerificationCode(attributeName, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\r\n      AttributeName: attributeName,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.inputVerificationCode(data);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to confirm an attribute using a confirmation code\r\n   * @param {string} attributeName Attribute being confirmed.\r\n   * @param {string} confirmationCode Code entered by user.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  verifyAttribute(attributeName, confirmationCode, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\r\n      AttributeName: attributeName,\r\n      Code: confirmationCode,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to get the device information using the current device key\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\r\n   * @returns {void}\r\n   */\r\n  getDevice(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('getDevice', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: this.deviceKey,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess(data);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to forget a specific device\r\n   * @param {string} deviceKey Device key.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  forgetSpecificDevice(deviceKey, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('forgetDevice', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: deviceKey,\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to forget the current device\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  forgetDevice(callback) {\r\n    this.forgetSpecificDevice(this.deviceKey, {\r\n      onFailure: callback.onFailure,\r\n      onSuccess: result => {\r\n        this.deviceKey = null;\r\n        this.deviceGroupKey = null;\r\n        this.randomPassword = null;\r\n        this.clearCachedDeviceKeyAndPassword();\r\n        return callback.onSuccess(result);\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to set the device status as remembered\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  setDeviceStatusRemembered(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: this.deviceKey,\r\n      DeviceRememberedStatus: 'remembered',\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to set the device status as not remembered\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  setDeviceStatusNotRemembered(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: this.deviceKey,\r\n      DeviceRememberedStatus: 'not_remembered',\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to list all devices for a user\r\n   *\r\n   * @param {int} limit the number of devices returned in a call\r\n   * @param {string} paginationToken the pagination token in case any was returned before\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\r\n   * @returns {void}\r\n   */\r\n  listDevices(limit, paginationToken, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('listDevices', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      Limit: limit,\r\n      PaginationToken: paginationToken,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess(data);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to globally revoke all tokens issued to a user\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  globalSignOut(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback.onFailure(new Error('User is not authenticated'));\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('globalSignOut', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      this.clearCachedTokens();\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used for the user to signOut of the application and clear the cached tokens.\r\n   * @returns {void}\r\n   */\r\n  signOut() {\r\n    this.signInUserSession = null;\r\n    this.clearCachedTokens();\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/CognitoUser.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class CognitoUserAttribute {\r\n  /**\r\n   * Constructs a new CognitoUserAttribute object\r\n   * @param {string=} Name The record's name\r\n   * @param {string=} Value The record's value\r\n   */\r\n  constructor({ Name, Value } = {}) {\r\n    this.Name = Name || '';\r\n    this.Value = Value || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's value.\r\n   */\r\n  getValue() {\r\n    return this.Value;\r\n  }\r\n\r\n  /**\r\n   * Sets the record's value.\r\n   * @param {string} value The new value.\r\n   * @returns {CognitoUserAttribute} The record for method chaining.\r\n   */\r\n  setValue(value) {\r\n    this.Value = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's name.\r\n   */\r\n  getName() {\r\n    return this.Name;\r\n  }\r\n\r\n  /**\r\n   * Sets the record's name\r\n   * @param {string} name The new name.\r\n   * @returns {CognitoUserAttribute} The record for method chaining.\r\n   */\r\n  setName(name) {\r\n    this.Name = name;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} a string representation of the record.\r\n   */\r\n  toString() {\r\n    return JSON.stringify(this);\r\n  }\r\n\r\n  /**\r\n   * @returns {object} a flat object representing the record.\r\n   */\r\n  toJSON() {\r\n    return {\r\n      Name: this.Name,\r\n      Value: this.Value,\r\n    };\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/CognitoUserAttribute.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class CognitoUserSession {\r\n  /**\r\n   * Constructs a new CognitoUserSession object\r\n   * @param {string} IdToken The session's Id token.\r\n   * @param {string=} RefreshToken The session's refresh token.\r\n   * @param {string} AccessToken The session's access token.\r\n   */\r\n  constructor({ IdToken, RefreshToken, AccessToken } = {}) {\r\n    if (AccessToken == null || IdToken == null) {\r\n      throw new Error('Id token and Access Token must be present.');\r\n    }\r\n\r\n    this.idToken = IdToken;\r\n    this.refreshToken = RefreshToken;\r\n    this.accessToken = AccessToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoIdToken} the session's Id token\r\n   */\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoRefreshToken} the session's refresh token\r\n   */\r\n  getRefreshToken() {\r\n    return this.refreshToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoAccessToken} the session's access token\r\n   */\r\n  getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the session is still valid based on session expiry information found\r\n   * in tokens and the current time\r\n   * @returns {boolean} if the session is still valid\r\n   */\r\n  isValid() {\r\n    const now = Math.floor(new Date() / 1000);\r\n\r\n    return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/CognitoUserSession.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst monthNames =\r\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n/** @class */\r\nexport default class DateHelper {\r\n  /**\r\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\r\n   */\r\n  getNowString() {\r\n    const now = new Date();\r\n\r\n    const weekDay = weekNames[now.getUTCDay()];\r\n    const month = monthNames[now.getUTCMonth()];\r\n    const day = now.getUTCDate();\r\n\r\n    let hours = now.getUTCHours();\r\n    if (hours < 10) {\r\n      hours = `0${hours}`;\r\n    }\r\n\r\n    let minutes = now.getUTCMinutes();\r\n    if (minutes < 10) {\r\n      minutes = `0${minutes}`;\r\n    }\r\n\r\n    let seconds = now.getUTCSeconds();\r\n    if (seconds < 10) {\r\n      seconds = `0${seconds}`;\r\n    }\r\n\r\n    const year = now.getUTCFullYear();\r\n\r\n    // ddd MMM D HH:mm:ss UTC YYYY\r\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\r\n\r\n    return dateNow;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/DateHelper.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nlet _data = {};\r\nlet _storage = window.localStorage;\r\n\r\n/** @class */\r\nclass MemoryStorage {\r\n  static setItem(key, value) {\r\n    return _data[key] = value;\r\n  };\r\n\r\n  static getItem(key) {\r\n    return _data.hasOwnProperty(key) ? _data[key] : undefined;\r\n  };\r\n\r\n  static removeItem(key) {\r\n    return delete _data[key];\r\n  };\r\n\r\n  static clear() {\r\n    return _data = {};\r\n  };\r\n}\r\n\r\n/** @class */\r\nexport default class StorageHelper {\r\n  constructor() {\r\n    try {\r\n      _storage.setItem('aws.cognito.test-ls', 1);\r\n      _storage.removeItem('aws.cognito.test-ls');\r\n    } catch (exception) {\r\n      _storage = MemoryStorage;\r\n    }\r\n  };\r\n\r\n  getStorage() {\r\n    return _storage;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/StorageHelper.js","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}\n// module id = 12\n// module chunks = 0","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class AuthenticationDetails {\r\n  /**\r\n   * Constructs a new AuthenticationDetails object\r\n   * @param {object=} data Creation options.\r\n   * @param {string} data.Username User being authenticated.\r\n   * @param {string} data.Password Plain-text password to authenticate with.\r\n   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\r\n   */\r\n  constructor(data) {\r\n    const { ValidationData, Username, Password } = data || {};\r\n    this.validationData = ValidationData || [];\r\n    this.username = Username;\r\n    this.password = Password;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's username\r\n   */\r\n  getUsername() {\r\n    return this.username;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's password\r\n   */\r\n  getPassword() {\r\n    return this.password;\r\n  }\r\n\r\n  /**\r\n   * @returns {Array} the record's validationData\r\n   */\r\n  getValidationData() {\r\n    return this.validationData;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/AuthenticationDetails.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\r\n\r\nimport CognitoUser from './CognitoUser';\r\nimport StorageHelper from './StorageHelper';\r\n\r\n/** @class */\r\nexport default class CognitoUserPool {\r\n  /**\r\n   * Constructs a new CognitoUserPool object\r\n   * @param {object} data Creation options.\r\n   * @param {string} data.UserPoolId Cognito user pool id.\r\n   * @param {string} data.ClientId User pool application client id.\r\n   * @param {int=} data.Paranoia Random number generation paranoia level.\r\n   */\r\n  constructor(data) {\r\n    const { UserPoolId, ClientId, Paranoia } = data || {};\r\n    if (!UserPoolId || !ClientId) {\r\n      throw new Error('Both UserPoolId and ClientId are required.');\r\n    }\r\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\r\n      throw new Error('Invalid UserPoolId format.');\r\n    }\r\n    const region = UserPoolId.split('_')[0];\r\n\r\n    this.userPoolId = UserPoolId;\r\n    this.clientId = ClientId;\r\n    this.paranoia = Paranoia || 0;\r\n\r\n    this.client = new CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region });\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the user pool id\r\n   */\r\n  getUserPoolId() {\r\n    return this.userPoolId;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the client id\r\n   */\r\n  getClientId() {\r\n    return this.clientId;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the paranoia level\r\n   */\r\n  getParanoia() {\r\n    return this.paranoia;\r\n  }\r\n\r\n  /**\r\n   * sets paranoia level\r\n   * @param {int} paranoia The new paranoia level.\r\n   * @returns {void}\r\n   */\r\n  setParanoia(paranoia) {\r\n    this.paranoia = paranoia;\r\n  }\r\n\r\n  /**\r\n   * @typedef {object} SignUpResult\r\n   * @property {CognitoUser} user New user.\r\n   * @property {bool} userConfirmed If the user is already confirmed.\r\n   */\r\n  /**\r\n   * method for signing up a user\r\n   * @param {string} username User's username.\r\n   * @param {string} password Plain-text initial password entered by user.\r\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n   * @param {(AttributeArg[])=} validationData Application metadata.\r\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n   * @returns {void}\r\n   */\r\n  signUp(username, password, userAttributes, validationData, callback) {\r\n    this.client.makeUnauthenticatedRequest('signUp', {\r\n      ClientId: this.clientId,\r\n      Username: username,\r\n      Password: password,\r\n      UserAttributes: userAttributes,\r\n      ValidationData: validationData,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n\r\n      const cognitoUser = {\r\n        Username: username,\r\n        Pool: this,\r\n      };\r\n\r\n      const returnData = {\r\n        user: new CognitoUser(cognitoUser),\r\n        userConfirmed: data.UserConfirmed,\r\n      };\r\n\r\n      return callback(null, returnData);\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * method for getting the current user of the application from the local storage\r\n   *\r\n   * @returns {CognitoUser} the user retrieved from storage\r\n   */\r\n  getCurrentUser() {\r\n    const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\r\n    const storage = new StorageHelper().getStorage();\r\n\r\n    const lastAuthUser = storage.getItem(lastUserKey);\r\n    if (lastAuthUser) {\r\n      const cognitoUser = {\r\n        Username: lastAuthUser,\r\n        Pool: this,\r\n      };\r\n\r\n      return new CognitoUser(cognitoUser);\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/CognitoUserPool.js","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport { default as AuthenticationDetails } from './AuthenticationDetails';\r\nexport { default as AuthenticationHelper } from './AuthenticationHelper';\r\nexport { default as CognitoAccessToken } from './CognitoAccessToken';\r\nexport { default as CognitoIdToken } from './CognitoIdToken';\r\nexport { default as CognitoRefreshToken } from './CognitoRefreshToken';\r\nexport { default as CognitoUser } from './CognitoUser';\r\nexport { default as CognitoUserAttribute } from './CognitoUserAttribute';\r\nexport { default as CognitoUserPool } from './CognitoUserPool';\r\nexport { default as CognitoUserSession } from './CognitoUserSession';\r\nexport { default as DateHelper } from './DateHelper';\r\n\n\n\n// WEBPACK FOOTER //\n// ./C:/projects/amazon-cognito-identity-js/src/index.js"],"sourceRoot":""}